/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("polymer-analyzer/lib/utils");
/**
 * This is a `UrlLoader` for use with a `polymer-analyzer` that reads files
 * that have been gathered by a `BuildBundler` transform stream.
 */
class FileMapUrlLoader {
    constructor(root, files) {
        this.root = root;
        this.files = files;
    }
    // We can always return true because we're just reading paths off a map.
    canLoad(_url) {
        return true;
    }
    load(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = this.files.get(utils_1.parseUrl(url).pathname);
            if (file == null) {
                throw new Error(`File ${url} not present in file map.`);
            }
            return file.contents.toString();
        });
    }
}
exports.FileMapUrlLoader = FileMapUrlLoader;
