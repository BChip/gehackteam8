{"version":3,"sources":["editor-service/editor-service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;GAWG;;;AAsBH,6EAA6E;AAC7E,yEAAyE;AACzE,kEAAkE;AAClE,EAAE;AACF,2EAA2E;AAC3E,oBAAoB;AACpB;CA+CC;AA/CD,sCA+CC","file":"editor-service.js","sourcesContent":["/**\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {SourcePosition, SourceRange, Warning} from '../model/model';\n\nexport type TypeaheadCompletion = ElementCompletion | AttributesCompletion;\nexport interface ElementCompletion {\n  kind: 'element-tags';\n  elements: {tagname: string, description: string, expandTo?: string}[];\n}\nexport interface AttributesCompletion {\n  kind: 'attributes';\n  attributes: AttributeCompletion[];\n}\n\nexport interface AttributeCompletion {\n  name: string;\n  description: string;\n  type: string|undefined;\n  sortKey: string;\n  inheritedFrom?: string;\n}\n\n// Important note: all arguments to, and results returned from editor service\n//     methods MUST be serializable as JSON, as the editor service may be\n//     running out of process and communicating with JSON strings.\n//\n//     Fortunately, editor-service_test will test that the results are JSON\n//     serializable.\nexport abstract class EditorService {\n  /**\n   * Notify the editor service that the given file has changed, and give the\n   * updated contents that should be used. If this method is not called, then\n   * the editor service will assume that files do not change and their contents\n   * will be cached.\n   */\n  abstract async fileChanged(localPath: string, contents: string):\n      Promise<void>;\n\n  /**\n   * Gives the documentation, as markdown encoded text, for the feature at\n   * the given position in the given file.\n   */\n  abstract async getDocumentationAtPosition(\n      localPath: string, position: SourcePosition): Promise<string|undefined>;\n\n  /**\n   * Gives the location for the definition for a feature. For example, for a\n   * v1 custom element, it will find its class.\n   */\n  abstract async getDefinitionForFeatureAtPosition(\n      localPath: string, position: SourcePosition): Promise<SourceRange>;\n\n  /**\n   * Assuming that the user is typing at the given location, what suggestions\n   * should we give for autocomplete?\n   */\n  abstract async getTypeaheadCompletionsAtPosition(\n      localPath: string,\n      position: SourcePosition): Promise<TypeaheadCompletion|undefined>;\n\n  /**\n   * Gives all warnings, errors, info notices, etc for the given file.\n   */\n  abstract async getWarningsForFile(localPath: string): Promise<Warning[]>;\n\n  /**\n   * Internal method, do not call. May be removed in a future release.\n   *\n   * Instructs the editor service to clear out all caches. Use very sparingly,\n   * as this will dramatically reduce performance of the next request as all\n   * relevant source must be re-read, parsed, scanned, and resolved.\n   *\n   * Useful for tests.\n   */\n  abstract async _clearCaches(): Promise<void>;\n}\n"]}