{"version":3,"sources":["editor-service/remote-editor-service.ts"],"names":[],"mappings":"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","file":"remote-editor-service.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as child_process from 'child_process';\nimport * as path from 'path';\nimport * as util from 'util';\n\nimport {SourcePosition, SourceRange, Warning} from '../model/model';\n\nimport {EditorService, TypeaheadCompletion} from './editor-service';\nimport {Request, RequestWrapper, ResponseWrapper} from './remote-editor-protocol';\n\n\n/**\n * Runs the editor server in a new node process and exposes a promise based\n * request API for communicating with it.\n */\nclass EditorServerChannel {\n  private _child: child_process.ChildProcess;\n  private _idCounter = 0;\n  private _outstandingRequests = new Map<number, Deferred<any>>();\n  constructor() {\n    const serverJsFile = path.join(__dirname, 'polymer-editor-server.js');\n    this._child = child_process.fork(serverJsFile, [], {});\n    this._child.addListener(\n        'message', (m: ResponseWrapper) => this._handleResponse(m));\n  }\n\n  async request(req: Request): Promise<any> {\n    const id = this._idCounter++;\n    const deferred = new Deferred<any>();\n    this._outstandingRequests.set(id, deferred);\n    await this._sendRequest(id, req);\n    return deferred.promise;\n  }\n\n  private _handleResponse(response: ResponseWrapper): void {\n    const deferred = this._outstandingRequests.get(response.id);\n    if (!deferred) {\n      console.error(\n          `EditorServer returned a response for unknown/previously` +\n          ` settled request id: ${response.id}`);\n      return;\n    }\n    switch (response.value.kind) {\n      case 'resolution':\n        return deferred.resolve(response.value.resolution);\n      case 'rejection':\n        return deferred.reject(response.value.rejection);\n      default:\n        const never: never = response.value;\n        throw new Error(`Got unknown kind of response: ${util.inspect(never)}`);\n    }\n  }\n\n  private async _sendRequest(id: number, value: Request): Promise<void> {\n    const request: RequestWrapper = {id, value};\n    await new Promise((resolve, reject) => {\n      (<any>this._child.send)(\n          request, (err: any) => err ? reject(err) : resolve());\n    });\n  }\n\n  dispose(): void {\n    this._child.kill();\n  }\n}\n\n/**\n * Runs in-process and communicates to the editor server, which\n * runs in a child process. Exposes the same interface as the\n * LocalEditorService.\n */\nexport class RemoteEditorService extends EditorService {\n  private _channel = new EditorServerChannel();\n  constructor(basedir: string) {\n    super();\n    this._channel.request({kind: 'init', basedir});\n  }\n\n  async getWarningsForFile(localPath: string): Promise<Warning[]> {\n    return this._channel.request({kind: 'getWarningsFor', localPath});\n  }\n\n  async fileChanged(localPath: string, contents?: string): Promise<void> {\n    return this._channel.request({kind: 'fileChanged', localPath, contents});\n  }\n\n  async getDocumentationAtPosition(localPath: string, position: SourcePosition):\n      Promise<string|undefined> {\n    return this._channel.request(\n        {kind: 'getDocumentationFor', localPath, position});\n  }\n\n  async getDefinitionForFeatureAtPosition(\n      localPath: string, position: SourcePosition): Promise<SourceRange> {\n    return this._channel.request(\n        {kind: 'getDefinitionFor', localPath, position});\n  }\n\n  async getTypeaheadCompletionsAtPosition(\n      localPath: string,\n      position: SourcePosition): Promise<TypeaheadCompletion|undefined> {\n    return this._channel.request(\n        {kind: 'getTypeaheadCompletionsFor', localPath, position});\n  }\n\n  async _clearCaches(): Promise<void> {\n    return this._channel.request({kind: '_clearCaches'});\n  }\n\n  dispose(): void {\n    this._channel.dispose();\n  }\n}\n\nclass Deferred<V> {\n  promise: Promise<V>;\n  resolve: (resp: V) => void;\n  reject: (err: any) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n"]}