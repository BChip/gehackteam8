{"version":3,"sources":["editor-service/polymer-editor-server.ts"],"names":[],"mappings":"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","file":"polymer-editor-server.js","sourcesContent":["#!/usr/bin/env node\n/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * This file is a binary not a library, and should be run via\n * `node polymer-editor-server.js` or `child_process.fork`\n *\n * Communication with this server is done via the Remote Editor Protocol via\n * stdin and stdout, as well as the node process.on('message') IPC process.\n *\n * See 'remote-editor-protocol.ts' for details on the communication protocol.\n */\n\nimport * as util from 'util';\n\nimport {FSUrlLoader} from '../url-loader/fs-url-loader';\nimport {PackageUrlResolver} from '../url-loader/package-url-resolver';\n\nimport {LocalEditorService} from './local-editor-service';\nimport {Request, RequestWrapper, ResponseWrapper, SettledValue} from './remote-editor-protocol';\n\nimport split = require('split');\n\n\n/**\n * Handles decoded Requests, dispatching them to a local editor service.\n */\nclass EditorServer {\n  private _localEditorService: LocalEditorService;\n\n  async handleMessage(message: Request): Promise<any> {\n    if (message.kind === 'init') {\n      if (this._localEditorService) {\n        throw new Error('Already initialized!');\n      }\n      this._localEditorService = new LocalEditorService({\n        urlLoader: new FSUrlLoader(message.basedir),\n        urlResolver: new PackageUrlResolver()\n      });\n      return;\n    }\n    const localEditorService = this._localEditorService;\n    if (!localEditorService) {\n      throw new Error(\n          `Must send an 'init' message before any others. ` +\n          `Received '${message.kind}' message before 'init'.`);\n    }\n    switch (message.kind) {\n      case 'getWarningsFor':\n        return localEditorService.getWarningsForFile(message.localPath);\n      case 'fileChanged':\n        await localEditorService.fileChanged(\n            message.localPath, message.contents);\n        return;\n      case 'getDefinitionFor':\n        return localEditorService.getDefinitionForFeatureAtPosition(\n            message.localPath, message.position);\n      case 'getDocumentationFor':\n        return localEditorService.getDocumentationAtPosition(\n            message.localPath, message.position);\n      case 'getTypeaheadCompletionsFor':\n        return localEditorService.getTypeaheadCompletionsAtPosition(\n            message.localPath, message.position);\n      case '_clearCaches':\n        return localEditorService._clearCaches();\n      default:\n        const never: never = message;\n        throw new Error(`Got unknown kind of message: ${util.inspect(never)}`);\n    }\n  }\n}\n\n\nconst server: EditorServer = new EditorServer();\n\n// stdin/stdout interface\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.resume();\nprocess.stdin.pipe(split()).on('data', async function(line: string) {\n  if (line.trim() === '') {\n    return;\n  }\n  let result: SettledValue;\n  let id: number|undefined = undefined;\n  try {\n    const request: RequestWrapper = JSON.parse(line);\n    id = request.id;\n    result = await getSettledValue(request.value);\n  } catch (e) {\n    if (id == null) {\n      id = -1;\n    }\n    result = {\n      kind: 'rejection',\n      rejection: e.message || e.stack || e.toString()\n    };\n  }\n\n  /** Have a respond function for type checking of ResponseWrapper */\n  function respond(response: ResponseWrapper) {\n    process.stdout.write(JSON.stringify(response) + '\\n');\n  }\n  respond({id, value: result});\n});\n\n// node child_process.fork() IPC interface\nprocess.on('message', async function(request: RequestWrapper) {\n  const result = await getSettledValue(request.value);\n  /** Have a respond function for type checking of ResponseWrapper */\n  function respond(response: ResponseWrapper) {\n    process.send!(response);\n  }\n  respond({id: request.id, value: result});\n});\n\n\n/**\n * Calls into the server and converts its responses into SettledValues.\n */\nasync function getSettledValue(request: Request): Promise<SettledValue> {\n  try {\n    const value = await server.handleMessage(request);\n    return {kind: 'resolution', resolution: value};\n  } catch (e) {\n    return {kind: 'rejection', rejection: e.message || e.stack || e.toString()};\n  }\n}\n"]}