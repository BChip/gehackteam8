{"version":3,"sources":["core/analysis-context.ts"],"names":[],"mappings":"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","file":"analysis-context.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as path from 'path';\n\nimport {ForkOptions, LazyEdgeMap, NoKnownParserError, Options, ScannerTable} from '../analyzer';\nimport {CssParser} from '../css/css-parser';\nimport {HtmlCustomElementReferenceScanner} from '../html/html-element-reference-scanner';\nimport {HtmlImportScanner} from '../html/html-import-scanner';\nimport {HtmlParser} from '../html/html-parser';\nimport {HtmlScriptScanner} from '../html/html-script-scanner';\nimport {HtmlStyleScanner} from '../html/html-style-scanner';\nimport {FunctionScanner} from '../javascript/function-scanner';\nimport {JavaScriptParser} from '../javascript/javascript-parser';\nimport {NamespaceScanner} from '../javascript/namespace-scanner';\nimport {JsonParser} from '../json/json-parser';\nimport {Document, InlineDocInfo, LocationOffset, Package, ScannedDocument, ScannedElement, ScannedFeature, ScannedImport, ScannedInlineDocument, Severity, Warning, WarningCarryingException} from '../model/model';\nimport {ParsedDocument} from '../parser/document';\nimport {Parser} from '../parser/parser';\nimport {BehaviorScanner} from '../polymer/behavior-scanner';\nimport {CssImportScanner} from '../polymer/css-import-scanner';\nimport {DomModuleScanner} from '../polymer/dom-module-scanner';\nimport {PolymerElementScanner} from '../polymer/polymer-element-scanner';\nimport {Polymer2ElementScanner} from '../polymer/polymer2-element-scanner';\nimport {Polymer2MixinScanner} from '../polymer/polymer2-mixin-scanner';\nimport {PseudoElementScanner} from '../polymer/pseudo-element-scanner';\nimport {scan} from '../scanning/scan';\nimport {Scanner} from '../scanning/scanner';\nimport {TypeScriptAnalyzer} from '../typescript/typescript-analyzer';\nimport {TypeScriptPreparser} from '../typescript/typescript-preparser';\nimport {PackageUrlResolver} from '../url-loader/package-url-resolver';\nimport {UrlLoader} from '../url-loader/url-loader';\nimport {UrlResolver} from '../url-loader/url-resolver';\n\nimport {AnalysisCache} from './analysis-cache';\nimport {LanguageAnalyzer} from './language-analyzer';\n\n/**\n * An analysis of a set of files at a specific point-in-time with respect to\n * updates to those files. New files can be added to an existing context, but\n * updates to files will cause a fork of the context with new analysis results.\n *\n * All file contents and analysis results are consistent within a single\n * anaysis context. A context is forked via either the fileChanged or\n * clearCaches methods.\n *\n * For almost all purposes this is an entirely internal implementation detail.\n * An Analyzer instance has a reference to its current context, so it will\n * appear to be statefull with respect to file updates.\n */\nexport class AnalysisContext {\n  private _parsers = new Map<string, Parser<ParsedDocument<any, any>>>([\n    ['html', new HtmlParser()],\n    ['js', new JavaScriptParser()],\n    ['ts', new TypeScriptPreparser()],\n    ['css', new CssParser()],\n    ['json', new JsonParser()],\n  ]);\n\n  private _languageAnalyzers = new Map<string, LanguageAnalyzer<any>>([\n    ['ts', new TypeScriptAnalyzer(this)],\n  ]);\n\n  /** A map from import url to urls that document lazily depends on. */\n  private _lazyEdges: LazyEdgeMap|undefined;\n\n  private _scanners: ScannerTable;\n\n  private _loader: UrlLoader;\n  private _resolver: UrlResolver;\n\n  private _cache = new AnalysisCache();\n\n  private _generation = 0;\n\n  private static _getDefaultScanners(lazyEdges: LazyEdgeMap|undefined) {\n    return new Map<string, Scanner<any, any, any>[]>([\n      [\n        'html',\n        [\n          new HtmlImportScanner(lazyEdges),\n          new HtmlScriptScanner(),\n          new HtmlStyleScanner(),\n          new DomModuleScanner(),\n          new CssImportScanner(),\n          new HtmlCustomElementReferenceScanner(),\n          new PseudoElementScanner(),\n        ]\n      ],\n      [\n        'js',\n        [\n          new PolymerElementScanner(),\n          new Polymer2MixinScanner(),\n          new BehaviorScanner(),\n          new NamespaceScanner(),\n          new FunctionScanner(),\n          new Polymer2ElementScanner()\n        ]\n      ],\n    ]);\n  }\n\n  constructor(options: Options) {\n    this._loader = options.urlLoader;\n    this._resolver = options.urlResolver || new PackageUrlResolver();\n    this._parsers = options.parsers || this._parsers;\n    this._lazyEdges = options.lazyEdges;\n    this._scanners = options.scanners ||\n        AnalysisContext._getDefaultScanners(this._lazyEdges);\n  }\n\n  /**\n   * Returns a copy of this cache context with proper cache invalidation.\n   */\n  filesChanged(urls: string[]) {\n    const newCache =\n        this._cache.invalidate(urls.map((url) => this.resolveUrl(url)));\n    return this._fork(newCache);\n  }\n\n  /**\n   * Implements Analyzer#analyze, see its docs.\n   */\n  async analyze(url: string, contents?: string): Promise<Document> {\n    const resolvedUrl = this.resolveUrl(url);\n    return this._cache.analyzedDocumentPromises.getOrCompute(\n        resolvedUrl, async() => {\n          const scannedDocument = await this.scan(resolvedUrl, contents);\n          const document = this._getDocument(scannedDocument.url);\n          return document;\n        });\n  }\n\n  private async _analyzeOrWarning(url: string): Promise<Document|Warning> {\n    try {\n      return await this.analyze(url);\n    } catch (e) {\n      if (e instanceof WarningCarryingException) {\n        return e.warning;\n      }\n      return {\n        sourceRange: {\n          file: this.resolveUrl(url),\n          start: {line: 0, column: 0},\n          end: {line: 0, column: 0}\n        },\n        code: 'unable-to-analyze',\n        message: `Unable to analyze file: ${e && e.message || e}`,\n        severity: Severity.ERROR\n      };\n    }\n  }\n\n  async analyzePackage(): Promise<Package> {\n    if (!this._loader.readDirectory) {\n      throw new Error(\n          `This analyzer doesn't support analyzerPackage, ` +\n          `its urlLoader can't list the files in a directory.`);\n    }\n    const allFiles = await this._loader.readDirectory('', true);\n    const filesInPackage = allFiles.filter((file) => !Package.isExternal(file));\n\n    const extensions = new Set(this._parsers.keys());\n    const filesWithParsers = filesInPackage.filter(\n        (fn) => extensions.has(path.extname(fn).substring(1)));\n    const documentsOrWarnings = await Promise.all(\n        filesWithParsers.map((f) => this._analyzeOrWarning(f)));\n    const documents = [];\n    const warnings = [];\n    for (const docOrWarning of documentsOrWarnings) {\n      if (docOrWarning instanceof Document) {\n        documents.push(docOrWarning);\n      } else {\n        warnings.push(docOrWarning);\n      }\n    }\n    return new Package(documents, warnings);\n  }\n\n  /**\n   * Gets an analyzed Document from the document cache. This is only useful for\n   * Analyzer plugins. You almost certainly want to use `analyze()` instead.\n   *\n   * If a document has been analyzed, it returns the analyzed Document. If not\n   * the scanned document cache is used and a new analyzed Document is returned.\n   * If a file is in neither cache, it returns `undefined`.\n   */\n  _getDocument(url: string): Document|undefined {\n    const resolvedUrl = this.resolveUrl(url);\n    const cachedResult = this._cache.analyzedDocuments.get(resolvedUrl);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const scannedDocument = this._cache.scannedDocuments.get(resolvedUrl);\n    if (!scannedDocument) {\n      return;\n    }\n\n    const extension = path.extname(resolvedUrl).substring(1);\n    const languageAnalyzer = this._languageAnalyzers.get(extension);\n    let analysisResult: any;\n    if (languageAnalyzer) {\n      analysisResult = languageAnalyzer.analyze(scannedDocument.url);\n    }\n\n    const document = new Document(scannedDocument, this, analysisResult);\n    this._cache.analyzedDocuments.set(resolvedUrl, document);\n    this._cache.analyzedDocumentPromises.getOrCompute(\n        resolvedUrl, async() => document);\n\n    document.resolve();\n    return document;\n  }\n\n  /**\n   * This is only useful for Analyzer plugins.\n   *\n   * If a url has been scanned, returns the ScannedDocument.\n   */\n  _getScannedDocument(url: string): ScannedDocument|undefined {\n    const resolvedUrl = this.resolveUrl(url);\n    return this._cache.scannedDocuments.get(resolvedUrl);\n  }\n\n  /**\n   * Clear all cached information from this analyzer instance.\n   *\n   * Note: if at all possible, instead tell the analyzer about the specific\n   * files that changed rather than clearing caches like this. Caching provides\n   * large performance gains.\n   */\n  clearCaches(): AnalysisContext {\n    return this._fork(new AnalysisCache());\n  }\n\n  /**\n   * Returns a copy of the context but with optional replacements of cache or\n   * constructor options.\n   *\n   * Note: this feature is experimental.\n   */\n  _fork(cache?: AnalysisCache, options?: ForkOptions): AnalysisContext {\n    const contextOptions: Options = {\n      lazyEdges: this._lazyEdges,\n      parsers: this._parsers,\n      scanners: this._scanners,\n      urlLoader: this._loader,\n      urlResolver: this._resolver,\n    };\n    if (options && options.urlLoader) {\n      contextOptions.urlLoader = options.urlLoader;\n    }\n    const copy = new AnalysisContext(contextOptions);\n    if (!cache) {\n      cache = this._cache.invalidate([]);\n    }\n    copy._cache = cache;\n    copy._generation = this._generation + 1;\n    return copy;\n  }\n\n  /**\n   * Scans a file locally, that is for features that do not depend\n   * on this files imports. Local features can be cached even when\n   * imports are invalidated. This method does not trigger transitive\n   * scanning, _scan() does that.\n   *\n   * TODO(justinfagnani): consider renaming this to something like\n   * _preScan, since about the only useful things it can find are\n   * imports, exports and other syntactic structures.\n   */\n  private async _scanLocal(resolvedUrl: string, contents?: string):\n      Promise<ScannedDocument> {\n    return this._cache.scannedDocumentPromises.getOrCompute(\n        resolvedUrl, async() => {\n          try {\n            const parsedDoc = await this._parse(resolvedUrl, contents);\n            const scannedDocument = await this._scanDocument(parsedDoc);\n\n            // Find all non-lazy imports\n            // TODO(justinfagnani): I think we should scan lazily imported\n            // documents since we know about them, we should load them. Their\n            // features should possibly be separated out at export time via\n            // better definition of scopes\n            const imports = scannedDocument.getNestedFeatures().filter(\n                (e) => e instanceof ScannedImport &&\n                    e.type !== 'lazy-html-import') as ScannedImport[];\n\n            // Update dependency graph\n            const importUrls = imports.map((i) => this.resolveUrl(i.url));\n            this._cache.dependencyGraph.addDocument(resolvedUrl, importUrls);\n\n            return scannedDocument;\n          } catch (e) {\n            this._cache.dependencyGraph.rejectDocument(resolvedUrl, e);\n            throw e;\n          }\n        });\n  }\n\n  /**\n   * Scan a toplevel document and all of its transitive dependencies.\n   */\n  async scan(resolvedUrl: string, contents?: string): Promise<ScannedDocument> {\n    return this._cache.dependenciesScannedPromises.getOrCompute(\n        resolvedUrl, async() => {\n          const scannedDocument = await this._scanLocal(resolvedUrl, contents);\n          // Find all non-lazy imports\n          // TODO(justinfagnani): I think we should scan lazily imported\n          // documents since we know about them, we should load them. Their\n          // features should possibly be separated out at export time via better\n          // definition of scopes\n          const imports = scannedDocument.getNestedFeatures().filter(\n              (e) => e instanceof ScannedImport &&\n                  e.type !== 'lazy-html-import') as ScannedImport[];\n\n          // Scan imports\n          for (const scannedImport of imports) {\n            const importUrl = this.resolveUrl(scannedImport.url);\n            // Request a scan of `importUrl` but do not wait for the results to\n            // avoid deadlock in the case of cycles. Later we use the\n            // DependencyGraph\n            // to wait for all transitive dependencies to load.\n            this.scan(importUrl).catch((error) => {\n              scannedImport.error = error || '';\n            });\n          }\n          await this._cache.dependencyGraph.whenReady(resolvedUrl);\n          return scannedDocument;\n        });\n  }\n\n  /**\n   * Scans a ParsedDocument.\n   */\n  private async _scanDocument(\n      document: ParsedDocument<any, any>,\n      maybeAttachedComment?: string): Promise<ScannedDocument> {\n    const warnings: Warning[] = [];\n    const scannedFeatures = await this._getScannedFeatures(document);\n    // If there's an HTML comment that applies to this document then we assume\n    // that it applies to the first feature.\n    const firstScannedFeature = scannedFeatures[0];\n    if (firstScannedFeature && firstScannedFeature instanceof ScannedElement) {\n      firstScannedFeature.applyHtmlComment(maybeAttachedComment);\n    }\n\n    const scannedDocument =\n        new ScannedDocument(document, scannedFeatures, warnings);\n\n    if (!scannedDocument.isInline) {\n      if (this._cache.scannedDocuments.has(scannedDocument.url)) {\n        throw new Error(\n            'Scanned document already in cache. This should never happen.');\n      }\n      this._cache.scannedDocuments.set(scannedDocument.url, scannedDocument);\n    }\n    await this._scanInlineDocuments(scannedDocument);\n    return scannedDocument;\n  }\n\n  private async _getScannedFeatures(document: ParsedDocument<any, any>):\n      Promise<ScannedFeature[]> {\n    const scanners = this._scanners.get(document.type);\n    if (scanners) {\n      return scan(document, scanners);\n    }\n    return [];\n  }\n\n  private async _scanInlineDocuments(containingDocument: ScannedDocument) {\n    for (const feature of containingDocument.features) {\n      if (!(feature instanceof ScannedInlineDocument)) {\n        continue;\n      }\n      const locationOffset: LocationOffset = {\n        line: feature.locationOffset.line,\n        col: feature.locationOffset.col,\n        filename: containingDocument.url\n      };\n      try {\n        const parsedDoc = this._parseContents(\n            feature.type,\n            feature.contents,\n            containingDocument.url,\n            {locationOffset, astNode: feature.astNode});\n        const scannedDoc =\n            await this._scanDocument(parsedDoc, feature.attachedComment);\n\n        feature.scannedDocument = scannedDoc;\n      } catch (err) {\n        if (err instanceof WarningCarryingException) {\n          containingDocument.warnings.push(err.warning);\n          continue;\n        }\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Loads the content at the provided resolved URL.\n   *\n   * Currently does no caching. If the provided contents are given then they\n   * are used instead of hitting the UrlLoader (e.g. when you have in-memory\n   * contents that should override disk).\n   */\n  async load(resolvedUrl: string, providedContents?: string) {\n    if (!this._loader.canLoad(resolvedUrl)) {\n      throw new Error(`Can't load URL: ${resolvedUrl}`);\n    }\n    return providedContents == null ? await this._loader.load(resolvedUrl) :\n                                      providedContents;\n  }\n\n  /**\n   * Caching + loading wrapper around _parseContents.\n   */\n  private async _parse(resolvedUrl: string, providedContents?: string):\n      Promise<ParsedDocument<any, any>> {\n    return this._cache.parsedDocumentPromises.getOrCompute(\n        resolvedUrl, async() => {\n          const content = await this.load(resolvedUrl, providedContents);\n          const extension = path.extname(resolvedUrl).substring(1);\n          return this._parseContents(extension, content, resolvedUrl);\n        });\n  }\n\n  /**\n   * Parse the given string into the Abstract Syntax Tree (AST) corresponding\n   * to its type.\n   */\n  private _parseContents(\n      type: string, contents: string, url: string,\n      inlineInfo?: InlineDocInfo<any>): ParsedDocument<any, any> {\n    const parser = this._parsers.get(type);\n    if (parser == null) {\n      throw new NoKnownParserError(`No parser for for file type ${type}`);\n    }\n    try {\n      return parser.parse(contents, url, inlineInfo);\n    } catch (error) {\n      if (error instanceof WarningCarryingException) {\n        throw error;\n      }\n      throw new Error(`Error parsing ${url}:\\n ${error.stack}`);\n    }\n  }\n\n  /**\n   * Returns true if the url given is resovable by the Analyzer's `UrlResolver`.\n   */\n  canResolveUrl(url: string): boolean {\n    return this._resolver.canResolve(url);\n  }\n\n  /**\n   * Resolves a URL with this Analyzer's `UrlResolver` or returns the given\n   * URL if it can not be resolved.\n   */\n  resolveUrl(url: string): string {\n    return this._resolver.canResolve(url) ? this._resolver.resolve(url) : url;\n  }\n}\n"]}