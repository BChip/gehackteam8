{"version":3,"sources":["core/analysis-cache.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;AAKH,yDAAkD;AAClD,yDAAmD;AAEnD;IAmBE;;;;;;OAMG;IACH,YAAY,IAAoB,EAAE,kBAAoC;QACpE,MAAM,CAAC,GAA2B,IAAI,IAAI,EAAE,CAAC;QAC7C,IAAI,CAAC,sBAAsB,GAAG,IAAI,iCAAc,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC;QAC3E,IAAI,CAAC,uBAAuB;YACxB,IAAI,iCAAc,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC;QAClD,IAAI,CAAC,wBAAwB;YACzB,IAAI,iCAAc,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC;QACnD,IAAI,CAAC,2BAA2B;YAC5B,IAAI,iCAAc,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC;QAEtD,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,gBAAiB,CAAC,CAAC;QACrD,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,iBAAkB,CAAC,CAAC;QACvD,IAAI,CAAC,eAAe,GAAG,kBAAkB,IAAI,IAAI,kCAAe,EAAE,CAAC;IACrE,CAAC;IAED;;;;;OAKG;IACH,UAAU,CAAC,aAAuB;QAChC,MAAM,QAAQ,GAAG,IAAI,aAAa,CAC9B,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC;QAC/D,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,aAAa,CAAC,CAAC,CAAC;YACjC,wEAAwE;YACxE,2BAA2B;YAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACjE,QAAQ,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC7C,QAAQ,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC9C,QAAQ,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAClD,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACvC,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAExC,0EAA0E;YAC1E,uEAAuE;YACvE,uEAAuE;YACvE,6DAA6D;YAC7D,GAAG,CAAC,CAAC,MAAM,wBAAwB,IAAI,UAAU,CAAC,CAAC,CAAC;gBAClD,QAAQ,CAAC,2BAA2B,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;gBACtE,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;YAC9D,CAAC;YAED,qEAAqE;YACrE,yEAAyE;YACzE,qEAAqE;YACrE,iCAAiC;YACjC,QAAQ,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;YAC1C,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAClD,QAAQ,CAAC,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,CAAC;QACH,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;CACF;AAjFD,sCAiFC","file":"analysis-cache.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Document, ScannedDocument} from '../model/model';\nimport {ParsedDocument} from '../parser/document';\n\nimport {AsyncWorkCache} from './async-work-cache';\nimport {DependencyGraph} from './dependency-graph';\n\nexport class AnalysisCache {\n  /**\n   * These are maps from resolved URLs to Promises of various stages of the\n   * analysis pipeline.\n   */\n  parsedDocumentPromises: AsyncWorkCache<string, ParsedDocument<any, any>>;\n  scannedDocumentPromises: AsyncWorkCache<string, ScannedDocument>;\n  dependenciesScannedPromises: AsyncWorkCache<string, ScannedDocument>;\n  analyzedDocumentPromises: AsyncWorkCache<string, Document>;\n\n  /**\n   * TODO(rictic): These synchronous caches need to be kept in sync with their\n   *     async work cache analogues above.\n   */\n  scannedDocuments: Map<string, ScannedDocument>;\n  analyzedDocuments: Map<string, Document>;\n\n  dependencyGraph: DependencyGraph;\n\n  /**\n   * @param from Another AnalysisCache to copy the caches from. The new\n   *   AnalysisCache will have an independent copy of everything but from's\n   *   dependency graph, which is passed in separately.\n   * @param newDependencyGraph If given, use this dependency graph. We pass\n   *   this in like this purely as an optimization. See `invalidatePaths`.\n   */\n  constructor(from?: AnalysisCache, newDependencyGraph?: DependencyGraph) {\n    const f: Partial<AnalysisCache> = from || {};\n    this.parsedDocumentPromises = new AsyncWorkCache(f.parsedDocumentPromises);\n    this.scannedDocumentPromises =\n        new AsyncWorkCache(f.scannedDocumentPromises);\n    this.analyzedDocumentPromises =\n        new AsyncWorkCache(f.analyzedDocumentPromises);\n    this.dependenciesScannedPromises =\n        new AsyncWorkCache(f.dependenciesScannedPromises);\n\n    this.scannedDocuments = new Map(f.scannedDocuments!);\n    this.analyzedDocuments = new Map(f.analyzedDocuments!);\n    this.dependencyGraph = newDependencyGraph || new DependencyGraph();\n  }\n\n  /**\n   * Returns a copy of this cache, with the given document and all of its\n   * transitive dependants invalidated.\n   *\n   * Must be called whenever a document changes.\n   */\n  invalidate(documentPaths: string[]): AnalysisCache {\n    const newCache = new AnalysisCache(\n        this, this.dependencyGraph.invalidatePaths(documentPaths));\n    for (const path of documentPaths) {\n      // Note that we must calculate the dependency graph based on the parent,\n      // not the forked newCache.\n      const dependants = this.dependencyGraph.getAllDependantsOf(path);\n      newCache.parsedDocumentPromises.delete(path);\n      newCache.scannedDocumentPromises.delete(path);\n      newCache.dependenciesScannedPromises.delete(path);\n      newCache.scannedDocuments.delete(path);\n      newCache.analyzedDocuments.delete(path);\n\n      // Analyzed documents need to be treated more carefully, because they have\n      // relationships with other documents. So first we remove all documents\n      // which transitively import the changed document. We also need to mark\n      // all of those docs as needing to rescan their dependencies.\n      for (const partiallyInvalidatedPath of dependants) {\n        newCache.dependenciesScannedPromises.delete(partiallyInvalidatedPath);\n        newCache.analyzedDocuments.delete(partiallyInvalidatedPath);\n      }\n\n      // Then we clear out the analyzed document promises, which could have\n      // in-progress results that don't cohere with the state of the new cache.\n      // Only populate the new analyzed promise cache with results that are\n      // definite, and not invalidated.\n      newCache.analyzedDocumentPromises.clear();\n      for (const keyValue of newCache.analyzedDocuments) {\n        newCache.analyzedDocumentPromises.set(keyValue[0], keyValue[1]);\n      }\n    }\n\n    return newCache;\n  }\n}\n"]}