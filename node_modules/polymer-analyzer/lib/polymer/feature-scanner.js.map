{"version":3,"sources":["polymer/feature-scanner.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;AAKH,+CAA+C;AAG/C,yCAAoD;AAGpD,wBAA+B,QAA4B;IACzD,gCAAgC;IAChC,MAAM,QAAQ,GAAgC,EAAE,CAAC;IAEjD,sBACI,OAAkC,EAClC,KAA4B,EAC5B,MAAmB;QACrB,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAChE,CAAC;IAED,4BACI,OAAkC,EAClC,IAA2B,EAC3B,OAAoB;QACtB,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,kBAAkB,CAAC,CAAC,CAAC;YAC5C,OAAO,CAAC,IAAI,CACR,sEAAsE,EACtE,KAAK,EACL,WAAW,CAAC,IAAI,EAChB,UAAU,CAAC,CAAC;YAChB,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;QACT,CAAC;QAED,MAAM,YAAY,GAAG,WAAW,CAAC,UAAU,CAAC,GAAG,CAC3C,CAAC,CAAC,KAAK,mCAAwB,CAAC,CAAC,EAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC;QACzE,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,YAAY,CAAC,CAAC,CAAC;YAChC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,MAAM,QAAQ,GAAY;QACxB,mBAAmB,EAAE,6BAA6B,IAAI,EAAE,MAAM;YAC5D,MAAM,gBAAgB,GAAG,MAAM,CAAC,qBAAqB,CACxB,IAAI,CAAC,MAAM,EACpC,CAAC,SAAS,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;YACxC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC;YACT,CAAC;YACD,MAAM,OAAO,GAA8B,EAAE,CAAC;YAC9C,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YACpC,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YAE1C,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,CAAC;KACF,CAAC;IAEF,MAAM,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC;AAC9B,CAAC;AApDD,wCAoDC;AAAA,CAAC","file":"feature-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport {Visitor} from '../javascript/estree-visitor';\nimport * as esutil from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\n\nimport {toScannedPolymerProperty} from './js-utils';\nimport {ScannedPolymerCoreFeature} from './polymer-core-feature';\n\nexport function featureScanner(document: JavaScriptDocument) {\n  /** The features we've found. */\n  const features: ScannedPolymerCoreFeature[] = [];\n\n  function _extractDesc(\n      feature: ScannedPolymerCoreFeature,\n      _node: estree.CallExpression,\n      parent: estree.Node) {\n    feature.description = esutil.getAttachedComment(parent) || '';\n  }\n\n  function _extractProperties(\n      feature: ScannedPolymerCoreFeature,\n      node: estree.CallExpression,\n      _parent: estree.Node) {\n    const featureNode = node.arguments[0];\n    if (featureNode.type !== 'ObjectExpression') {\n      console.warn(\n          'Expected first argument to Polymer.Base._addFeature to be an object.',\n          'Got',\n          featureNode.type,\n          'instead.');\n      return;\n    }\n    if (!featureNode.properties) {\n      return;\n    }\n\n    const polymerProps = featureNode.properties.map(\n        (p) => toScannedPolymerProperty(p, document.sourceRangeForNode(p)!));\n    for (const prop of polymerProps) {\n      feature.addProperty(prop);\n    }\n  }\n\n  const visitors: Visitor = {\n    enterCallExpression: function enterCallExpression(node, parent) {\n      const isAddFeatureCall = esutil.matchesCallExpression(\n          <estree.MemberExpression>node.callee,\n          ['Polymer', 'Base', '_addFeature']);\n      if (!isAddFeatureCall) {\n        return;\n      }\n      const feature = <ScannedPolymerCoreFeature>{};\n      _extractDesc(feature, node, parent);\n      _extractProperties(feature, node, parent);\n\n      features.push(feature);\n    },\n  };\n\n  return {visitors, features};\n};\n"]}