{"version":3,"sources":["polymer/js-utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;AAEH,uCAAuC;AAGvC,iDAAwF;AACxF,6CAA6C;AAC7C,0CAAsF;AAItF;;GAEG;AACH,kCACI,IAA6C,EAC7C,WAAwB;IAC1B,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,2BAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACrE,MAAM,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IACnD,MAAM,SAAS,GAAG,0BAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE9C,MAAM,QAAQ,GAAc,EAAE,CAAC;IAC/B,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QACf,QAAQ,CAAC,IAAI,CAAC;YACZ,IAAI,EAAE,mBAAmB;YACzB,OAAO,EACH,iEAAiE,IAAI;iBAChE,GAAG,CAAC,IAAI,EAAE;YACnB,WAAW,EAAE,WAAW;YACxB,QAAQ,EAAE,gBAAQ,CAAC,OAAO;SAC3B,CAAC,CAAC;IACL,CAAC;IACD,IAAI,IAAI,GAAG,oBAAW,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAChD,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAClD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;IAC9B,CAAC;IACD,MAAM,IAAI,GAAG,SAAS,IAAI,EAAE,CAAC;IAC7B,MAAM,MAAM,GAA2B;QACrC,IAAI;QACJ,IAAI;QACJ,WAAW;QACX,WAAW;QACX,QAAQ;QACR,OAAO,EAAE,IAAI;QACb,eAAe,EAAE,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC;QAClD,KAAK,EAAE,WAAW;QAClB,OAAO,EAAE,iBAAiB,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC;KACrD,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AArCD,4DAqCC;AAAA,CAAC;AAEF;;;GAGG;AACH,MAAM,uBAAuB,GAAG,IAAI,GAAG,CAAC;IACtC,UAAU;IACV,kBAAkB;IAClB,gBAAgB;IAChB,WAAW;IACX,aAAa;IACb,SAAS;IACT,UAAU;IACV,6BAA6B;IAC7B,SAAS;IACT,gBAAgB;IAChB,IAAI;IACJ,WAAW;IACX,QAAQ;IACR,WAAW;IACX,YAAY;IACZ,OAAO;IACP,YAAY;CACb,CAAC,CAAC;AAEH;;GAEG;AACH,yBACI,IAA6C,EAC7C,WAAwB;IAC1B,MAAM,aAAa,GACf,wBAAwB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAEhD,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,UAAU;QACjC,aAAa,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC;QAC3C,MAAM,KAAK,GAA8B,IAAI,CAAC,KAAK,CAAC;QACpD,aAAa,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK;YACpD,kEAAkE;YAClE,2BAA2B;YAC3B,MAAM,CAAC,EAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,aAAa,CAAC;AACvB,CAAC;AAjBD,0CAiBC;AAGD,2BACI,IAAY,EACZ,UAAsC,EACtC,uBAAgC;IAClC,MAAM,eAAe,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IACrD,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAE3D,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,eAAe,CAAC;IACzB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,uBAAuB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;YAC5B,qEAAqE;YACrE,0CAA0C;YAC1C,MAAM,OAAO,GAAG,CAAC,CAAC,UAAU,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YACrE,MAAM,CAAC,OAAO,GAAG,QAAQ,GAAG,SAAS,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,oEAAoE;YACpE,mDAAmD;YACnD,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC;IACH,CAAC;AACH,CAAC;AA7BD,8CA6BC","file":"js-utils.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as escodegen from 'escodegen';\nimport * as estree from 'estree';\n\nimport {closureType, getAttachedComment, objectKeyToString} from '../javascript/esutil';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {Privacy, ScannedMethod, Severity, SourceRange, Warning} from '../model/model';\n\nimport {ScannedPolymerProperty} from './polymer-element';\n\n/**\n * Create a ScannedProperty object from an estree Property AST node.\n */\nexport function toScannedPolymerProperty(\n    node: estree.Property|estree.MethodDefinition,\n    sourceRange: SourceRange): ScannedPolymerProperty {\n  const parsedJsdoc = jsdoc.parseJsdoc(getAttachedComment(node) || '');\n  const description = parsedJsdoc.description.trim();\n  const maybeName = objectKeyToString(node.key);\n\n  const warnings: Warning[] = [];\n  if (!maybeName) {\n    warnings.push({\n      code: 'unknown-prop-name',\n      message:\n          `Could not determine name of property from expression of type: ${node\n              .key.type}`,\n      sourceRange: sourceRange,\n      severity: Severity.WARNING\n    });\n  }\n  let type = closureType(node.value, sourceRange);\n  const typeTag = jsdoc.getTag(parsedJsdoc, 'type');\n  if (typeTag) {\n    type = typeTag.type || type;\n  }\n  const name = maybeName || '';\n  const result: ScannedPolymerProperty = {\n    name,\n    type,\n    description,\n    sourceRange,\n    warnings,\n    astNode: node,\n    isConfiguration: configurationProperties.has(name),\n    jsdoc: parsedJsdoc,\n    privacy: getOrInferPrivacy(name, parsedJsdoc, false)\n  };\n\n  return result;\n};\n\n/**\n * Properties on Polymer element prototypes that are part of Polymer's\n * configuration syntax.\n */\nconst configurationProperties = new Set([\n  'attached',\n  'attributeChanged',\n  'beforeRegister',\n  'configure',\n  'constructor',\n  'created',\n  'detached',\n  'enableCustomStyleProperties',\n  'extends',\n  'hostAttributes',\n  'is',\n  'listeners',\n  'mixins',\n  'observers',\n  'properties',\n  'ready',\n  'registered',\n]);\n\n/**\n * Create a ScannedMethod object from an estree Property AST node.\n */\nexport function toScannedMethod(\n    node: estree.Property|estree.MethodDefinition,\n    sourceRange: SourceRange): ScannedMethod {\n  const scannedMethod: ScannedMethod =\n      toScannedPolymerProperty(node, sourceRange);\n\n  if (scannedMethod.type === 'Function' ||\n      scannedMethod.type === 'ArrowFunction') {\n    const value = <estree.FunctionExpression>node.value;\n    scannedMethod.params = (value.params || []).map((param) => {\n      // With ES6 we can have a lot of param patterns. Best to leave the\n      // formatting to escodegen.\n      return {name: escodegen.generate(param)};\n    });\n  }\n\n  return scannedMethod;\n}\n\n\nexport function getOrInferPrivacy(\n    name: string,\n    annotation: jsdoc.Annotation|undefined,\n    privateUnlessDocumented: boolean): Privacy {\n  const explicitPrivacy = jsdoc.getPrivacy(annotation);\n  const specificName = name.slice(name.lastIndexOf('.') + 1);\n\n  if (explicitPrivacy) {\n    return explicitPrivacy;\n  } else if (specificName.startsWith('__')) {\n    return 'private';\n  } else if (specificName.startsWith('_')) {\n    return 'protected';\n  } else if (specificName.endsWith('_')) {\n    return 'private';\n  } else if (configurationProperties.has(specificName)) {\n    return 'protected';\n  } else {\n    if (privateUnlessDocumented) {\n      // Some members, like methods or properties on classes are private by\n      // default unless they have documentation.\n      const hasDocs = !!annotation && !jsdoc.isAnnotationEmpty(annotation);\n      return hasDocs ? 'public' : 'private';\n    } else {\n      // Other members, like entries in the Polymer `properties` block are\n      // public unless there are clear signals otherwise.\n      return 'public';\n    }\n  }\n}\n"]}