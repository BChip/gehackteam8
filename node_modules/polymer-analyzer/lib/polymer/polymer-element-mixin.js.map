{"version":3,"sources":["polymer/polymer-element-mixin.ts"],"names":[],"mappings":";;AAiBA,0CAA0I;AAG1I,yCAA6C;AAC7C,uDAAgK;AAahK,gCAAwC,SAAQ,2BAAmB;IAcjE,YAAY,OAAiB;QAC3B,KAAK,EAAE,CAAC;QAbV,eAAU,GAA6B,EAAE,CAAC;QAC1C,YAAO,GAAoB,EAAE,CAAC;QAC9B,cAAS,GAAe,EAAE,CAAC;QAC3B,cAAS,GAAuC,EAAE,CAAC;QACnD,wBAAmB,GAAgC,EAAE,CAAC;QACtD,0EAA0E;QAC1E,yEAAyE;QACzE,cAAS,GAAwB,SAAS,CAAC;QAC3C,kBAAa,GAAwB,SAAS,CAAC;QAC/C,WAAM,GAAY,KAAK,CAAC;QACxB,aAAQ,GAAY,KAAK,CAAC;QAIxB,uEAAuE;QACvE,oBAAoB;QACpB,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAY,CAAC;QAC1D,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACnC,CAAC;IAED,WAAW,CAAC,IAA4B;QACtC,6BAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED,SAAS,CAAC,MAAqB;QAC7B,2BAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,OAAO,CAAC,QAAkB;QACxB,MAAM,OAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE7B,GAAG,CAAC,CAAC,MAAM,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACrC,4DAA4D;YAC5D,MAAM,CAAC,OAAO,GAAG,4BAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACtE,CAAC;QACD,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;QACpB,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChC,4DAA4D;YAC5D,mCAAmC;YACnC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;CACF;AA/CD,gEA+CC;AAED,yBAAiC,SAAQ,oBAAY;IAcnD;QACE,KAAK,EAAE,CAAC;QALV,aAAQ,GAAc,EAAE,CAAC;QAMvB,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,eAAe,EAAE,uBAAuB,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAChC,CAAC;IAED,oBAAoB,CAAC,QAAyB;QAC5C,MAAM,eAAe,GAAQ,EAAE,CAAC;QAChC,MAAM,qBAAqB,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QACjE,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,qBAAqB,CAAC,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC;gBACtB,eAAe,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC;QACD,MAAM,CAAC,EAAC,OAAO,EAAE,eAAe,EAAC,CAAC;IACpC,CAAC;CACF;AA9BD,kDA8BC","file":"polymer-element-mixin.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport * as dom5 from 'dom5';\nimport * as estree from 'estree';\n\nimport {Annotation as JsDocAnnotation} from '../javascript/jsdoc';\nimport {Document, ElementMixin, Method, Privacy, ScannedElementMixin, ScannedMethod, ScannedReference, SourceRange} from '../model/model';\n\nimport {ScannedBehaviorAssignment} from './behavior';\nimport {getOrInferPrivacy} from './js-utils';\nimport {addMethod, addProperty, LocalId, Observer, PolymerExtension, PolymerProperty, ScannedPolymerExtension, ScannedPolymerProperty} from './polymer-element';\n\nexport interface Options {\n  name: string;\n  jsdoc: JsDocAnnotation;\n  description: string;\n  summary: string;\n  privacy: Privacy;\n  sourceRange: SourceRange;\n  mixins: ScannedReference[];\n  astNode: estree.Node;\n}\n\nexport class ScannedPolymerElementMixin extends ScannedElementMixin implements\n    ScannedPolymerExtension {\n  properties: ScannedPolymerProperty[] = [];\n  methods: ScannedMethod[] = [];\n  observers: Observer[] = [];\n  listeners: {event: string, handler: string}[] = [];\n  behaviorAssignments: ScannedBehaviorAssignment[] = [];\n  // FIXME(rictic): domModule and scriptElement aren't known at a file local\n  //     level. Remove them here, they should only exist on PolymerElement.\n  domModule: dom5.Node|undefined = undefined;\n  scriptElement: dom5.Node|undefined = undefined;\n  pseudo: boolean = false;\n  abstract: boolean = false;\n\n  constructor(options?: Options) {\n    super();\n    // TODO(justinfagnani): fix this constructor to not be crazy, or remove\n    // class altogether.\n    const optionsCopy = Object.assign({}, options) as Options;\n    Object.assign(this, optionsCopy);\n  }\n\n  addProperty(prop: ScannedPolymerProperty) {\n    addProperty(this, prop);\n  }\n\n  addMethod(method: ScannedMethod) {\n    addMethod(this, method);\n  }\n\n  resolve(document: Document): PolymerElementMixin {\n    const element = new PolymerElementMixin();\n    Object.assign(element, this);\n\n    for (const method of element.methods) {\n      // methods are only public by default if they're documented.\n      method.privacy = getOrInferPrivacy(method.name, method.jsdoc, true);\n    }\n    element.mixins = [];\n    for (const mixin of this.mixins) {\n      // TODO(rictic): we should mix these mixins into `this`. See\n      // PolymerElement's logic for this.\n      element.mixins.push(mixin.resolve(document));\n    }\n\n    return element;\n  }\n}\n\nexport class PolymerElementMixin extends ElementMixin implements\n    PolymerExtension {\n  properties: PolymerProperty[];\n  methods: Method[];\n\n  observers: Observer[];\n  listeners: {event: string, handler: string}[];\n  behaviorAssignments: ScannedBehaviorAssignment[];\n  domModule?: dom5.Node;\n  scriptElement?: dom5.Node;\n  localIds: LocalId[] = [];\n\n  abstract?: boolean;\n\n  constructor() {\n    super();\n    this.kinds = new Set(['element-mixin', 'polymer-element-mixin']);\n    this.behaviorAssignments = [];\n  }\n\n  emitPropertyMetadata(property: PolymerProperty) {\n    const polymerMetadata: any = {};\n    const polymerMetadataFields = ['notify', 'observer', 'readOnly'];\n    for (const field of polymerMetadataFields) {\n      if (field in property) {\n        polymerMetadata[field] = property[field];\n      }\n    }\n    return {polymer: polymerMetadata};\n  }\n}\n"]}