{"version":3,"sources":["model/element.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;AAGH,iDAA+D;AAM/D,oBAA4B,SAAQ,iCAAkB;IAWpD;QACE,KAAK,EAAE,CAAC;IACV,CAAC;IAED,gBAAgB,CAAC,WAA6B;QAC5C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,WAAW,IAAI,EAAE,CAAC;IAC3D,CAAC;IAED,OAAO,CAAC,SAAmB;QACzB,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC7B,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;CACF;AAxBD,wCAwBC;AAED,aAAqB,SAAQ,0BAAW;IAWtC;QACE,KAAK,EAAE,CAAC;IACV,CAAC;IAED,IAAI,WAAW;QACb,MAAM,MAAM,GAAgB,IAAI,GAAG,EAAE,CAAC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;CACF;AAzBD,0BAyBC","file":"element.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Document} from './document';\nimport {ElementBase, ScannedElementBase} from './element-base';\nimport {Feature, Privacy} from './feature';\nimport {Reference, ScannedReference} from './reference';\n\nexport {Visitor} from '../javascript/estree-visitor';\n\nexport class ScannedElement extends ScannedElementBase {\n  tagName?: string;\n  className?: string;\n  superClass?: ScannedReference;\n  privacy: Privacy;\n\n  /**\n   * For customized built-in elements, the tagname of the superClass.\n   */\n  extends?: string;\n\n  constructor() {\n    super();\n  }\n\n  applyHtmlComment(commentText: string|undefined) {\n    this.description = this.description || commentText || '';\n  }\n\n  resolve(_document: Document): Element {\n    const element = new Element();\n    Object.assign(element, this);\n    return element;\n  }\n}\n\nexport class Element extends ElementBase implements Feature {\n  tagName?: string;\n  className?: string;\n  superClass?: Reference;\n  privacy: Privacy;\n\n  /**\n   * For customized built-in elements, the tagname of the superClass.\n   */\n  extends?: string;\n\n  constructor() {\n    super();\n  }\n\n  get identifiers(): Set<string> {\n    const result: Set<string> = new Set();\n    if (this.tagName) {\n      result.add(this.tagName);\n    }\n    if (this.className) {\n      result.add(this.className);\n    }\n    return result;\n  }\n}\n"]}