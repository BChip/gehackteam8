{"version":3,"sources":["model/element-base.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;AAUH;;GAEG;AACH;IAAA;QACE,eAAU,GAAsB,EAAE,CAAC;QACnC,eAAU,GAAuB,EAAE,CAAC;QACpC,gBAAW,GAAG,EAAE,CAAC;QACjB,YAAO,GAAG,EAAE,CAAC;QACb,UAAK,GAAoC,EAAE,CAAC;QAC5C,WAAM,GAAmB,EAAE,CAAC;QAG5B,aAAQ,GAAc,EAAE,CAAC;QAEzB,aAAO,GAAW,EAAE,CAAC;QACrB,WAAM,GAAuB,EAAE,CAAC;IASlC,CAAC;IAPC,gBAAgB,CAAC,WAA6B;QAC5C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,WAAW,IAAI,EAAE,CAAC;IAC3D,CAAC;IAED,OAAO,CAAC,SAAmB;QACzB,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;IAC9B,CAAC;CACF;AArBD,gDAqBC;AAED;IAIE,YAAY,IAAY,EAAE,KAAkB;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CACF;AARD,oBAQC;AAED;;GAEG;AACH;IAAA;QACE,eAAU,GAAe,EAAE,CAAC;QAC5B,eAAU,GAAgB,EAAE,CAAC;QAC7B,YAAO,GAAa,EAAE,CAAC;QACvB,gBAAW,GAAG,EAAE,CAAC;QACjB,YAAO,GAAG,EAAE,CAAC;QACb,UAAK,GAAoC,EAAE,CAAC;QAC5C,WAAM,GAAY,EAAE,CAAC;QAIrB,UAAK,GAAgB,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QAC1C,aAAQ,GAAc,EAAE,CAAC;QACzB,aAAO,GAAW,EAAE,CAAC;QAErB;;;;;;;WAOG;QACH,WAAM,GAAgB,EAAE,CAAC;IAyB3B,CAAC;IAvBC,IAAI,WAAW;QACb,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;IAC9B,CAAC;IAED,YAAY;QACV,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,oBAAoB,CAAC,SAAmB;QACtC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,qBAAqB,CAAC,UAAqB;QACzC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,kBAAkB,CAAC,SAAiB;QAClC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,iBAAiB,CAAC,MAAa;QAC7B,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;CACF;AAhDD,kCAgDC","file":"element-base.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport * as jsdoc from '../javascript/jsdoc';\n\nimport {Attribute, Document, Event, Feature, Method, Property, Reference, Resolvable, ScannedAttribute, ScannedEvent, ScannedProperty, ScannedReference, SourceRange, Warning} from './model';\n\nexport {Visitor} from '../javascript/estree-visitor';\n\n/**\n * Base class for ScannedElement and ScannedElementMixin.\n */\nexport abstract class ScannedElementBase implements Resolvable {\n  properties: ScannedProperty[] = [];\n  attributes: ScannedAttribute[] = [];\n  description = '';\n  summary = '';\n  demos: {desc?: string; path: string}[] = [];\n  events: ScannedEvent[] = [];\n  sourceRange: SourceRange|undefined;\n  astNode: estree.Node|null;\n  warnings: Warning[] = [];\n  jsdoc?: jsdoc.Annotation;\n  'slots': Slot[] = [];\n  mixins: ScannedReference[] = [];\n\n  applyHtmlComment(commentText: string|undefined) {\n    this.description = this.description || commentText || '';\n  }\n\n  resolve(_document: Document): any {\n    throw new Error('abstract');\n  }\n}\n\nexport class Slot {\n  name: string;\n  range: SourceRange;\n\n  constructor(name: string, range: SourceRange) {\n    this.name = name;\n    this.range = range;\n  }\n}\n\n/**\n * Base class for Element and ElementMixin.\n */\nexport abstract class ElementBase implements Feature {\n  properties: Property[] = [];\n  attributes: Attribute[] = [];\n  methods: Method[] = [];\n  description = '';\n  summary = '';\n  demos: {desc?: string; path: string}[] = [];\n  events: Event[] = [];\n  sourceRange: SourceRange;\n  jsdoc?: jsdoc.Annotation;\n  astNode: estree.Node|null;\n  kinds: Set<string> = new Set(['element']);\n  warnings: Warning[] = [];\n  'slots': Slot[] = [];\n\n  /**\n   * Mixins that this class declares with `@mixes`.\n   *\n   * Mixins are applied linearly after the superclass, in order from first\n   * to last. Mixins that compose other mixins will be flattened into a\n   * single list. A mixin can be applied more than once, each time its\n   * members override those before it in the prototype chain.\n   */\n  mixins: Reference[] = [];\n\n  get identifiers(): Set<string> {\n    throw new Error('abstract');\n  }\n\n  emitMetadata(): Object {\n    return {};\n  }\n\n  emitPropertyMetadata(_property: Property): Object {\n    return {};\n  }\n\n  emitAttributeMetadata(_attribute: Attribute): Object {\n    return {};\n  }\n\n  emitMethodMetadata(_property: Method): Object {\n    return {};\n  }\n\n  emitEventMetadata(_event: Event): Object {\n    return {};\n  }\n}\n"]}