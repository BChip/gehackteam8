{"version":3,"sources":["model/package.ts"],"names":[],"mappings":"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","file":"package.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Document, FeatureKinds, QueryOptions as DocumentQueryOptions} from './document';\nimport {Feature} from './feature';\nimport {BaseQueryOptions, Queryable} from './queryable';\nimport {Warning} from './warning';\n\nexport type QueryOptions = object & BaseQueryOptions;\n\n// A regexp that matches paths to external code.\n// TODO(rictic): Make this extensible (polymer.json?).\n// Note that we match directories named exactly `build`, but will match any\n// directory name prefixed by `bower_components` or `node_modules`, in order to\n// ignore `polymer install`'s variants, which look like bower_components-foo\nconst MATCHES_EXTERNAL = /(^|\\/)(bower_components|node_modules|build($|\\/))/;\n\n/**\n * Represents a queryable interface over all documents in a package/project.\n *\n * Results of queries will include results from all documents in the package, as\n * well as from external dependencies that are transitively imported by\n * documents in the package.\n */\nexport class Package implements Queryable {\n  private _documents: Set<Document>;\n  private _toplevelWarnings: Warning[];\n\n  static isExternal(path: string) {\n    return MATCHES_EXTERNAL.test(path);\n  }\n\n  constructor(documents: Iterable<Document>, warnings: Warning[]) {\n    const potentialRoots = new Set(documents);\n    this._toplevelWarnings = warnings;\n\n    // We trim down the set of documents as a performance optimization. We only\n    // need a set of documents such that all other documents we're interested in\n    // can be reached from them. That way we'll do less duplicate work when we\n    // query over all documents.\n    for (const doc of potentialRoots) {\n      for (const imprt of doc.getByKind('import', {imported: true})) {\n        // When there's cycles we can keep any element of the cycle, so why not\n        // this one.\n        if (imprt.document !== doc) {\n          potentialRoots.delete(imprt.document);\n        }\n      }\n    }\n    this._documents = potentialRoots;\n  }\n\n  getByKind<K extends keyof FeatureKinds>(kind: K, options?: QueryOptions):\n      Set<FeatureKinds[K]>;\n  getByKind(kind: string, options?: QueryOptions): Set<Feature>;\n  getByKind(kind: string, options?: QueryOptions): Set<Feature> {\n    const result = new Set();\n    const docQueryOptions = this._getDocumentQueryOptions(options);\n    for (const doc of this._documents) {\n      addAll(result, doc.getByKind(kind, docQueryOptions));\n    }\n    return result;\n  }\n\n  getById<K extends keyof FeatureKinds>(\n      kind: K, identifier: string,\n      options?: QueryOptions): Set<FeatureKinds[K]>;\n  getById(kind: string, identifier: string, options?: QueryOptions):\n      Set<Feature>;\n  getById(kind: string, identifier: string, options?: QueryOptions):\n      Set<Feature> {\n    const result = new Set();\n    const docQueryOptions = this._getDocumentQueryOptions(options);\n    for (const doc of this._documents) {\n      addAll(result, doc.getById(kind, identifier, docQueryOptions));\n    }\n    return result;\n  }\n\n  getOnlyAtId<K extends keyof FeatureKinds>(\n      kind: K, identifier: string,\n      options?: QueryOptions): FeatureKinds[K]|undefined;\n  getOnlyAtId(kind: string, identifier: string, options?: QueryOptions): Feature\n      |undefined;\n  getOnlyAtId(kind: string, identifier: string, options?: QueryOptions): Feature\n      |undefined {\n    const results = this.getById(kind, identifier, options);\n    if (results.size > 1) {\n      throw new Error(\n          `Expected to find at most one ${kind} with id ${identifier} ` +\n          `but found ${results.size}.`);\n    };\n    return results.values().next().value || undefined;\n  }\n\n  /**\n   * Get all features for all documents in the project or their imports.\n   */\n  getFeatures(options?: QueryOptions): Set<Feature> {\n    const result = new Set();\n    const docQueryOptions = this._getDocumentQueryOptions(options);\n    for (const doc of this._documents) {\n      addAll(result, doc.getFeatures(docQueryOptions));\n    }\n    return result;\n  }\n\n  /**\n   * Get all warnings in the project.\n   */\n  getWarnings(options?: QueryOptions): Warning[] {\n    const result = new Set(this._toplevelWarnings);\n    const docQueryOptions = this._getDocumentQueryOptions(options);\n    for (const doc of this._documents) {\n      addAll(result, new Set(doc.getWarnings(docQueryOptions)));\n    }\n    return Array.from(result);\n  }\n\n  private _getDocumentQueryOptions(options?: QueryOptions):\n      DocumentQueryOptions {\n    return {\n      imported: true,\n      externalPackages: !!(options && options.externalPackages)\n    };\n  }\n}\n\nfunction addAll<T>(set1: Set<T>, set2: Set<T>): Set<T> {\n  for (const val of set2) {\n    set1.add(val);\n  }\n  return set1;\n}\n"]}