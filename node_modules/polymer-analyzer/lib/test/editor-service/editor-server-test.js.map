{"version":3,"sources":["test/editor-service/editor-server-test.ts"],"names":[],"mappings":"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","file":"editor-server-test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as child_process from 'child_process';\nimport * as path from 'path';\nimport * as util from 'util';\n\nimport {invertPromise} from '../test-utils';\n\nimport split = require('split');\n\nconst pathToServer =\n    path.join(__dirname, '../../editor-service/polymer-editor-server.js');\n\nsuite('RemoteEditorService', () => {\n  /**\n   * These are the tests. We run these tests using a few different ways of\n   * communicating with the server.\n   */\n  function editorServiceInterfaceTests(\n      sendRequest: (request: any) => Promise<void>,\n      getNextResponse: (expectedId: number) => Promise<any>) {\n    const initMessage = {\n      kind: 'init',\n      basedir: `${path.join(__dirname, 'static')}`\n    };\n    const getWarningsMessage = {\n      kind: 'getWarningsFor',\n      localPath: 'malformed.html'\n    };\n\n\n    test('can create and initialize', async() => {\n      await sendRequest({id: 0, value: initMessage});\n      const response = await getNextResponse(0);\n      assert.deepEqual(response, undefined);\n    });\n    test('initializing twice is an error', async() => {\n      await sendRequest({id: 0, value: initMessage});\n      await getNextResponse(0);\n      await sendRequest({id: 1, value: initMessage});\n      const errorMessage = await invertPromise(getNextResponse(1));\n      assert.equal(errorMessage, 'Already initialized!');\n    });\n    test('the first request must be initialization', async() => {\n      await sendRequest({id: 0, value: getWarningsMessage});\n      const errorMessage = await invertPromise(getNextResponse(0));\n      assert.equal(\n          errorMessage,\n          `Must send an 'init' message before any others. Received ` +\n              `'getWarningsFor' message before 'init'.`);\n    });\n    const testName = 'can perform editor service functions once initialized';\n    test(testName, async() => {\n      await sendRequest({id: 0, value: initMessage});\n      await getNextResponse(0);\n      await sendRequest({id: 1, value: getWarningsMessage});\n      const warnings = await getNextResponse(1);\n      assert.deepEqual(warnings, [{\n                         code: 'parse-error',\n                         message: 'Unexpected token <',\n                         severity: 0,\n                         sourceRange: {\n                           file: 'malformed.html',\n                           start: {line: 266, column: 0},\n                           end: {line: 266, column: 0}\n                         }\n                       }]);\n    });\n  }\n\n  suite(\n      'from node with child_process.fork() and process.send() for IPC', () => {\n\n        let child: child_process.ChildProcess;\n\n        setup(() => {\n          child = child_process.fork(pathToServer);\n        });\n\n        teardown(() => {\n          child.kill();\n        });\n\n        async function sendRequest(request: any) {\n          child.send(request);\n        };\n\n        async function getNextResponse(expectedId: number) {\n          const message = await new Promise<any>((resolve) => {\n            child.once('message', function(msg: any) {\n              resolve(msg);\n            });\n          });\n          assert.equal(message.id, expectedId);\n\n          if (message.value.kind === 'resolution') {\n            return message.value.resolution;\n          }\n          if (message.value.kind === 'rejection') {\n            throw message.value.rejection;\n          }\n          throw new Error(\n              `Response with unexpected kind: ${util.inspect(message.value)}`);\n        };\n\n        editorServiceInterfaceTests(sendRequest, getNextResponse);\n      });\n\n  suite('from the command line with stdin and stdout', () => {\n    let child: child_process.ChildProcess;\n    let lines: NodeJS.ReadableStream;\n\n    setup(() => {\n      child = child_process.spawn(\n          'node', [pathToServer], {stdio: ['pipe', 'pipe', 'pipe']});\n      child.stdout.setEncoding('utf8');\n      child.stdout.resume();\n      lines = child.stdout.pipe(split());\n    });\n\n    teardown(() => {\n      child.kill();\n    });\n\n    async function sendRequest(message: any) {\n      return new Promise<void>((resolve, reject) => {\n        child.stdin.write(JSON.stringify(message) + '\\n', (err: any) => {\n          err ? reject(err) : resolve();\n        });\n      });\n    };\n\n    async function getNextResponse(expectedId: number) {\n      const line =\n          await new Promise<string>((resolve) => lines.once('data', resolve));\n      const message = JSON.parse(line);\n      assert.equal(message.id, expectedId);\n      if (message.value.kind === 'resolution') {\n        return message.value.resolution;\n      } else if (message.value.kind === 'rejection') {\n        throw message.value.rejection;\n      }\n      throw new Error(\n          `Response with unexpected kind: ${util.inspect(message.value)}`);\n    }\n\n    editorServiceInterfaceTests(sendRequest, getNextResponse);\n  });\n});\n"]}