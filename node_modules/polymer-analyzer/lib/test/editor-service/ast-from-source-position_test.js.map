{"version":3,"sources":["test/editor-service/ast-from-source-position_test.ts"],"names":[],"mappings":"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","file":"ast-from-source-position_test.js","sourcesContent":["/**\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {getLocationInfoForPosition} from '../../editor-service/ast-from-source-position';\nimport {HtmlParser} from '../../html/html-parser';\nimport {SourcePosition} from '../../model/model';\n\nsuite('getLocationInfoForPosition', () => {\n  const parser = new HtmlParser();\n\n  test('works for an empty string', () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('');\n    assert.equal(allKindsSpaceSeparated, 'text');\n  });\n\n  test('works when just starting a tag', () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t');\n    // We assume that you're starting to write an html tag in a text node, so\n    // this works.\n    assert.equal(allKindsSpaceSeparated, 'text text text');\n  });\n\n  test('works with a closed tag', () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t></t>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName text endTag endTag endTag text');\n  });\n\n  test('works with an unclosed tag', () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t>');\n    assert.equal(allKindsSpaceSeparated, 'text tagName tagName text');\n  });\n\n  test('works for a closed tag with empty attributes section', () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t ></t>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute text endTag endTag endTag text');\n  });\n\n  test('works for an unclosed tag with empty attributes section', () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t >');\n    assert.equal(allKindsSpaceSeparated, 'text tagName tagName attribute text');\n  });\n\n  test('works for a closed tag with a boolean attribute', () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t a></t>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute attribute ' +\n            'text endTag endTag endTag text');\n  });\n\n  test('works for an unclosed tag with a boolean attribute', () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t a>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute attribute text');\n  });\n\n  test('works with an empty attribute value in a closed tag', () => {\n    let allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t a=></t>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute attribute attributeValue text ' +\n            'endTag endTag endTag text');\n\n    allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t a=\"\"></t>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute attribute ' +\n            'attributeValue attributeValue attributeValue text ' +\n            'endTag endTag endTag text');\n\n    allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t a=\\'\\'></t>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute attribute ' +\n            'attributeValue attributeValue attributeValue text ' +\n            'endTag endTag endTag text');\n  });\n\n  test('works with an empty attribute value in an unclosed tag', () => {\n    let allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t a=>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute attribute attributeValue text');\n\n    allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t a=\"\">');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute attribute attributeValue attributeValue attributeValue text');\n\n    allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t a=\\'\\'>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName attribute attribute attributeValue attributeValue attributeValue text');\n  });\n\n  test(`works with a closed tag with text content`, () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t> </t>');\n    assert.equal(\n        allKindsSpaceSeparated,\n        'text tagName tagName text text endTag endTag endTag text');\n  });\n\n  test(`works with an unclosed tag with text content`, () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<t> ');\n    assert.equal(allKindsSpaceSeparated, 'text tagName tagName text text');\n  });\n\n  test(`works with comments`, () => {\n    const allKindsSpaceSeparated = getAllKindsSpaceSeparated('<!-- foo -->');\n    assert.match(allKindsSpaceSeparated, /^text (comment ){11}text$/);\n  });\n\n  test(`works with script tags`, () => {\n    let allKindsSpaceSeparated =\n        getAllKindsSpaceSeparated('<script> </script>');\n    assert.match(\n        allKindsSpaceSeparated,\n        /^text (tagName ){7}scriptTagContents scriptTagContents (endTag ){8}text$/);\n\n    allKindsSpaceSeparated = getAllKindsSpaceSeparated('<script></script>');\n    assert.match(\n        allKindsSpaceSeparated,\n        /^text (tagName ){7}scriptTagContents (endTag ){8}text$/);\n  });\n\n  test(`works with style tags`, () => {\n    let allKindsSpaceSeparated = getAllKindsSpaceSeparated('<style> </style>');\n    assert.match(\n        allKindsSpaceSeparated,\n        /^text (tagName ){6}(styleTagContents ){2}(endTag ){7}text$/);\n\n    allKindsSpaceSeparated = getAllKindsSpaceSeparated('<style></style>');\n    assert.match(\n        allKindsSpaceSeparated,\n        /^text (tagName ){6}styleTagContents (endTag ){7}text$/);\n  });\n\n  test(`it can handle the contents of a template tag`, () => {\n    const allKindsSpaceSeparated =\n        getAllKindsSpaceSeparated('<template><t a=\"\"> </t></template>');\n    assert.match(\n        allKindsSpaceSeparated,\n        /^text (tagName ){9}text (tagName ){2}(attribute ){2}(attributeValue ){3}(text ){2}(endTag ){3}text (endTag ){10}text$/);\n  });\n\n  /**\n   * Return a space separated string of the `kind` for every location in the\n   * given html text.\n   *\n   * For small documents you can just assert against this string. For larger\n   * documents you can write a regexp to express your assertion.\n   */\n  function getAllKindsSpaceSeparated(text: string) {\n    const doc = parser.parse(text, 'uninteresting file name.html');\n    return getEveryPosition(text)\n        .map((pos) => getLocationInfoForPosition(doc, pos).kind)\n        .join(' ');\n  }\n});\n\nfunction getEveryPosition(source: string): SourcePosition[] {\n  const results: SourcePosition[] = [];\n  let lineNum = 0;\n  for (const line of source.split('\\n')) {\n    let columnNum = 0;\n    for (const _ of line) {\n      _.big;  // TODO(rictic): tsc complains about unused _\n      results.push({line: lineNum, column: columnNum});\n      columnNum++;\n    }\n    results.push({line: lineNum, column: columnNum});\n    lineNum++;\n  }\n  return results;\n}\n"]}