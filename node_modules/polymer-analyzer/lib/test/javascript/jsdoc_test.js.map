{"version":3,"sources":["test/javascript/jsdoc_test.ts"],"names":[],"mappings":"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","file":"jsdoc_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport * as jsdoc from '../../javascript/jsdoc.js';\n\nsuite('jsdoc', function() {\n  suite('.parseJsdoc', function() {\n    test('parses single-line', function() {\n      const parsed = jsdoc.parseJsdoc('* Just some text');\n      assert.deepEqual(parsed, {\n        description: 'Just some text',\n        tags: [],\n      });\n    });\n\n    test('parses body-only', function() {\n      const parsed = jsdoc.parseJsdoc('* Just some text\\n* in multiple lines.');\n      assert.deepEqual(parsed, {\n        description: 'Just some text\\nin multiple lines.',\n        tags: [],\n      });\n    });\n\n    test('parses tag-only', function() {\n      const parsed = jsdoc.parseJsdoc('* @atag');\n      assert.deepEqual(parsed, {\n        description: '',\n        tags: [\n          {tag: 'atag', description: null, name: null, type: null},\n        ],\n      });\n    });\n\n    test('parses tag-name', function() {\n      const parsed = jsdoc.parseJsdoc('* @do stuff');\n      assert.deepEqual(parsed, {\n        description: '',\n        tags: [\n          {tag: 'do', description: 'stuff', name: null, type: null},\n        ],\n      });\n    });\n\n    test('parses tag-desc', function() {\n      const parsed = jsdoc.parseJsdoc('* @do a thing');\n      assert.deepEqual(parsed, {\n        description: '',\n        tags: [\n          {tag: 'do', description: 'a thing', name: null, type: null},\n        ],\n      });\n    });\n\n    test('parses param type', function() {\n      const parsed = jsdoc.parseJsdoc('* @param {Type} name desc desc');\n      assert.deepEqual(parsed, {\n        description: '',\n        tags: [\n          {tag: 'param', type: 'Type', name: 'name', description: 'desc desc'},\n        ],\n      });\n    });\n\n    test('preserves indentation for the body', function() {\n      const parsed = jsdoc.parseJsdoc('*     The desc.\\n*     thing');\n      assert.deepEqual(parsed.description, '    The desc.\\n    thing');\n    });\n\n    test('handles empty lines', function() {\n      const parsed = jsdoc.parseJsdoc('*\\n *\\n * Foo\\n   *\\n * Bar');\n      assert.deepEqual(parsed.description, 'Foo\\n\\nBar');\n    });\n\n  });\n\n});\n"]}