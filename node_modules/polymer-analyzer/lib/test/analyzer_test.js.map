{"version":3,"sources":["test/analyzer_test.ts"],"names":[],"mappings":"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","file":"analyzer_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/// <reference path=\"../../node_modules/@types/mocha/index.d.ts\" />\n\nimport {assert, use} from 'chai';\nimport * as clone from 'clone';\nimport * as estree from 'estree';\nimport * as path from 'path';\nimport * as shady from 'shady-css-parser';\n\nimport {Analyzer} from '../analyzer';\nimport {ParsedCssDocument} from '../css/css-document';\nimport {ParsedHtmlDocument} from '../html/html-document';\nimport {HtmlParser} from '../html/html-parser';\nimport {ScriptTagImport} from '../html/html-script-tag';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {Document, Import, ScannedImport, ScannedInlineDocument, Severity} from '../model/model';\nimport {FSUrlLoader} from '../url-loader/fs-url-loader';\nimport {UrlLoader} from '../url-loader/url-loader';\nimport {Deferred} from '../utils';\n\nimport {CodeUnderliner} from './test-utils';\n\nimport chaiAsPromised = require('chai-as-promised');\nimport chaiSubset = require('chai-subset');\nimport stripIndent = require('strip-indent');\n\nuse(chaiSubset);\nuse(chaiAsPromised);\n\nsuite('Analyzer', () => {\n  let analyzer: Analyzer;\n  let underliner: CodeUnderliner;\n\n  setup(() => {\n    const urlLoader = new FSUrlLoader(__dirname);\n    analyzer = new Analyzer({urlLoader});\n    underliner = new CodeUnderliner(urlLoader);\n  });\n\n  test('canResolveUrl defaults to not resolving external urls', () => {\n    assert.isTrue(analyzer.canResolveUrl('/path'), '/path');\n    assert.isTrue(analyzer.canResolveUrl('../path'), '../path');\n    assert.isFalse(analyzer.canResolveUrl('http://host'), 'http://host');\n    assert.isFalse(\n        analyzer.canResolveUrl('http://host/path'), 'http://host/path');\n  });\n\n  suite('analyze()', () => {\n\n    test(\n        'analyzes a document with an inline Polymer element feature',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/analysis/simple/simple-element.html');\n          const elements =\n              Array.from(document.getByKind('element', {imported: false}));\n          assert.deepEqual(elements.map((e) => e.tagName), ['simple-element']);\n        });\n\n    test(\n        'analyzes a document with an external Polymer element feature',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/analysis/separate-js/element.html');\n          const elements =\n              Array.from(document.getByKind('element', {imported: true}));\n          assert.deepEqual(elements.map((e) => e.tagName), ['my-element']);\n        });\n\n    test('gets source ranges of documents correct', async() => {\n      const document = await analyzer.analyze('static/dependencies/root.html');\n      assert.deepEqual(await underliner.underline(document.sourceRange), `\n<link rel=\"import\" href=\"inline-only.html\">\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n<link rel=\"import\" href=\"leaf.html\">\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n<link rel=\"import\" href=\"inline-and-imports.html\">\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n<link rel=\"import\" href=\"subfolder/in-folder.html\">\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n`);\n    });\n\n    test('analyzes inline scripts correctly', async() => {\n      const document = await analyzer.analyze(\n          'static/inline-documents/inline-documents.html');\n      const jsDocuments = document.getByKind('js-document');\n      assert.equal(jsDocuments.size, 1);\n      const jsDocument = jsDocuments.values().next().value;\n      assert.isObject(jsDocument.astNode);\n      assert.equal(jsDocument.astNode!.tagName, 'script');\n      assert.deepEqual(await underliner.underline(jsDocument.sourceRange), `\n  <script>\n          ~\n    console.log('hi');\n~~~~~~~~~~~~~~~~~~~~~~\n  </script>\n~~`);\n    });\n\n    test('analyzes inline styles correctly', async() => {\n      const document = await analyzer.analyze(\n          'static/inline-documents/inline-documents.html');\n      const cssDocuments = document.getByKind('css-document');\n      assert.equal(cssDocuments.size, 1);\n      const cssDocument = cssDocuments.values().next().value;\n      assert.isObject(cssDocument.astNode);\n      assert.equal(cssDocument.astNode!.tagName, 'style');\n      assert.deepEqual(await underliner.underline(cssDocument.sourceRange), `\n  <style>\n         ~\n    body {\n~~~~~~~~~~\n      color: red;\n~~~~~~~~~~~~~~~~~\n    }\n~~~~~\n  </style>\n~~`);\n    });\n\n    test('analyzes a document with an import', async() => {\n      const document =\n          await analyzer.analyze('static/analysis/behaviors/behavior.html');\n\n      const behaviors =\n          Array.from(document.getByKind('behavior', {imported: true}));\n      assert.deepEqual(\n          behaviors.map((b) => b.className),\n          ['MyNamespace.SubBehavior', 'MyNamespace.SimpleBehavior']);\n    });\n\n    test(\n        'creates a document warning when a behavior cannot be found in that document',\n        async() => {\n          const document =\n              await analyzer.analyze('static/html-missing-behaviors.html');\n          const warnings = document.getWarnings({imported: false});\n          assert.containSubset(warnings, [\n            {\n              message:\n                  'Unable to resolve behavior `Polymer.ExpectedMissingBehavior`. ' +\n                  'Did you import it? Is it annotated with @polymerBehavior?',\n              severity: Severity.ERROR,\n              code: 'unknown-polymer-behavior',\n            },\n            {\n              code: 'could-not-determine-behavior-name',\n              message:\n                  'Could not determine behavior name from expression of type CallExpression',\n              severity: Severity.WARNING,\n            }\n          ]);\n          assert.deepEqual(await underliner.underline(warnings), [\n            `\n        Polymer.ExpectedMissingBehavior\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`,\n            `\n        BehaviorFactory('give me a behavior plz.')\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`\n          ]);\n        });\n\n    test(\n        'creates \"missing behavior\" warnings on imported documents without elements',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/chained-missing-behavior/index.html');\n          const chainedDocument = document.getOnlyAtId(\n              'document',\n              'static/chained-missing-behavior/chained.html',\n              {imported: true})!;\n          const expectedWarning = {\n            code: 'unknown-polymer-behavior',\n            message:\n                'Unable to resolve behavior `NotFoundBehavior`. Did you import it? Is it annotated with @polymerBehavior?',\n            severity: 0,\n            sourceRange: {\n              end: {column: 55, line: 2},\n              start: {column: 39, line: 2},\n              file: 'static/chained-missing-behavior/chained.html'\n            },\n          };\n          assert.deepEqual(document.getWarnings({imported: false}), []);\n          assert.deepEqual(\n              document.getWarnings({imported: true}), [expectedWarning]);\n          assert.deepEqual(\n              chainedDocument.getWarnings({imported: false}),\n              [expectedWarning]);\n        });\n\n    test(\n        'an inline document can find features from its container document',\n        async() => {\n          const document =\n              await analyzer.analyze('static/analysis/behaviors/behavior.html');\n\n          const localDocuments =\n              document.getByKind('document', {imported: false});\n          assert.equal(localDocuments.size, 2);  // behavior.html and its inline\n\n          const allDocuments = document.getByKind('document', {imported: true});\n          assert.equal(allDocuments.size, 4);\n\n          const inlineDocuments =\n              Array.from(document.getFeatures({imported: false}))\n                  .filter(\n                      (d) => d instanceof Document && d.isInline) as Document[];\n          assert.equal(inlineDocuments.length, 1);\n\n          // This is the main purpose of the test: get a feature from the inline\n          // document that's imported by the container document\n          const behaviorJsDocument = inlineDocuments[0];\n          const subBehavior = behaviorJsDocument.getOnlyAtId(\n              'behavior', 'MyNamespace.SubBehavior', {imported: true});\n          assert.equal(subBehavior!.className, 'MyNamespace.SubBehavior');\n        });\n\n    test(\n        'an inline script can find features from its container document',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/script-tags/inline/test-element.html');\n          const inlineDocuments =\n              Array.from(document.getByKind('document', {imported: false}))\n                  .filter((d) => d.isInline);\n          assert.equal(inlineDocuments.length, 1);\n          const inlineJsDocument = inlineDocuments[0];\n\n          // The inline document can find the container's imported features\n          const subBehavior = inlineJsDocument.getOnlyAtId(\n              'behavior', 'TestBehavior', {imported: true});\n          assert.equal(subBehavior!.className, 'TestBehavior');\n        });\n\n    test(\n        'an external script can find features from its container document',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/script-tags/external/test-element.html');\n\n          const htmlScriptTags =\n              Array.from(document.getByKind('html-script', {imported: false}));\n          assert.equal(htmlScriptTags.length, 1);\n\n          const htmlScriptTag = htmlScriptTags[0] as ScriptTagImport;\n          const scriptDocument = htmlScriptTag.document;\n\n          // The inline document can find the container's imported features\n          const subBehavior = scriptDocument.getOnlyAtId(\n              'behavior', 'TestBehavior', {imported: true})!;\n          assert.equal(subBehavior.className, 'TestBehavior');\n        });\n\n\n    // This test is nearly identical to the previous, but covers a different\n    // issue.\n    // PolymerElement must find behaviors while resolving, and if inline\n    // documents don't add a document feature for their container until after\n    // resolution, then the element can't find them and throws.\n    test(\n        'an inline document can find behaviors from its container document',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/analysis/behaviors/elementdir/element.html');\n\n          const documents = document.getByKind('document', {imported: false});\n          assert.equal(documents.size, 2);\n\n          const inlineDocuments = Array.from(documents).filter(\n              (d) => d instanceof Document && d.isInline) as Document[];\n          assert.equal(inlineDocuments.length, 1);\n\n          // This is the main purpose of the test: get a feature from the inline\n          // document that's imported by the container document\n          const behaviorJsDocument = inlineDocuments[0];\n          const subBehavior = behaviorJsDocument.getOnlyAtId(\n              'behavior', 'MyNamespace.SubBehavior', {imported: true})!;\n          assert.equal(subBehavior.className, 'MyNamespace.SubBehavior');\n        });\n\n    test('returns a Document with warnings for malformed files', async() => {\n      const document = await analyzer.analyze('static/malformed.html');\n      assert(document.getWarnings({imported: false}).length >= 1);\n    });\n\n    test('analyzes transitive dependencies', async() => {\n      const root = await analyzer.analyze('static/dependencies/root.html');\n\n      // If we ask for documents we get every document in evaluation order.\n      assert.deepEqual(\n          Array.from(root.getByKind('document', {imported: true}))\n              .map((d) => [d.url, d.parsedDocument.type, d.isInline]),\n          [\n            ['static/dependencies/root.html', 'html', false],\n            ['static/dependencies/inline-only.html', 'html', false],\n            ['static/dependencies/inline-only.html', 'js', true],\n            ['static/dependencies/inline-only.html', 'css', true],\n            ['static/dependencies/leaf.html', 'html', false],\n            ['static/dependencies/inline-and-imports.html', 'html', false],\n            ['static/dependencies/inline-and-imports.html', 'js', true],\n            ['static/dependencies/subfolder/in-folder.html', 'html', false],\n            [\n              'static/dependencies/subfolder/subfolder-sibling.html',\n              'html',\n              false\n            ],\n            ['static/dependencies/inline-and-imports.html', 'css', true],\n          ]);\n\n      // If we ask for imports we get the import statements in evaluation order.\n      // Unlike documents, we can have duplicates here because imports exist\n      // in distinct places in their containing docs.\n      assert.deepEqual(\n          Array.from(root.getByKind('import', {imported: true}))\n              .map((d) => d.url),\n          [\n            'static/dependencies/inline-only.html',\n            'static/dependencies/leaf.html',\n            'static/dependencies/inline-and-imports.html',\n            'static/dependencies/subfolder/in-folder.html',\n            'static/dependencies/subfolder/subfolder-sibling.html',\n            'static/dependencies/subfolder/in-folder.html',\n          ]);\n\n      const inlineOnly = root.getOnlyAtId(\n          'document', 'static/dependencies/inline-only.html', {imported: true});\n      assert.deepEqual(\n          Array.from(inlineOnly!.getByKind('document', {imported: true}))\n              .map((d) => d.parsedDocument.type),\n          ['html', 'js', 'css']);\n\n      const leaf = root.getOnlyAtId(\n          'document', 'static/dependencies/leaf.html', {imported: true})!;\n      assert.deepEqual(\n          Array.from(leaf.getByKind('document', {imported: true})), [leaf]);\n\n      const inlineAndImports = root.getOnlyAtId(\n          'document',\n          'static/dependencies/inline-and-imports.html',\n          {imported: true})!;\n      assert.deepEqual(\n          Array.from(inlineAndImports.getByKind('document', {imported: true}))\n              .map((d) => d.parsedDocument.type),\n          ['html', 'js', 'html', 'html', 'css']);\n      const inFolder = root.getOnlyAtId(\n          'document',\n          'static/dependencies/subfolder/in-folder.html',\n          {imported: true})!;\n      assert.deepEqual(\n          Array.from(inFolder.getByKind('document', {imported: true}))\n              .map((d) => d.url),\n          [\n            'static/dependencies/subfolder/in-folder.html',\n            'static/dependencies/subfolder/subfolder-sibling.html'\n          ]);\n\n      // check de-duplication\n      assert.equal(\n          inlineAndImports!.getOnlyAtId(\n              'document',\n              'static/dependencies/subfolder/in-folder.html',\n              {imported: true}),\n          inFolder);\n    });\n\n    test(`rejects for files that don't exist`, async() => {\n      await assert.isRejected(analyzer.analyze('/static/does_not_exist'));\n    });\n\n    test('handles documents from multiple calls to analyze()', async() => {\n      await analyzer.analyze('static/caching/file1.html');\n      await analyzer.analyze('static/caching/file2.html');\n    });\n\n    test('handles mutually recursive documents', async() => {\n      const document = await analyzer.analyze('static/circular/mutual-a.html');\n      const shallowFeatures = document.getFeatures({imported: false});\n      assert.deepEqual(\n          Array.from(shallowFeatures)\n              .filter((f) => f.kinds.has('document'))\n              .map((f) => (f as Document).url),\n          ['static/circular/mutual-a.html']);\n      assert.deepEqual(\n          Array.from(shallowFeatures)\n              .filter((f) => f.kinds.has('import'))\n              .map((f) => (f as Import).url),\n          ['static/circular/mutual-b.html']);\n\n      const deepFeatures = document.getFeatures({imported: true});\n      assert.deepEqual(\n          Array.from(deepFeatures)\n              .filter((f) => f.kinds.has('document'))\n              .map((f) => (f as Document).url),\n          ['static/circular/mutual-a.html', 'static/circular/mutual-b.html']);\n      assert.deepEqual(\n          Array.from(deepFeatures)\n              .filter((f) => f.kinds.has('import'))\n              .map((f) => (f as Import).url),\n          ['static/circular/mutual-b.html', 'static/circular/mutual-a.html']);\n    });\n\n    test(\n        'handles parallel analyses of mutually recursive documents',\n        async() => {\n          // At one point this deadlocked, or threw a _makeDocument error.\n          await Promise.all([\n            analyzer.analyze('static/circular/mutual-a.html'),\n            analyzer.analyze('static/circular/mutual-b.html')\n          ]);\n        });\n\n    test('handles a document importing itself', async() => {\n      const document =\n          await analyzer.analyze('static/circular/self-import.html');\n      const features = document.getFeatures({imported: true});\n      assert.deepEqual(\n          Array.from(features)\n              .filter((f) => f.kinds.has('document'))\n              .map((f) => (f as Document).url),\n          ['static/circular/self-import.html']);\n      assert.deepEqual(\n          Array.from(features)\n              .filter((f) => f.kinds.has('import'))\n              .map((f) => (f as Import).url),\n          [\n            'static/circular/self-import.html',\n            'static/circular/self-import.html'\n          ]);\n    });\n\n    suite('handles documents with spaces in filename', () => {\n\n      test('given a url with unencoded spaces to analyze', async() => {\n        const document = await analyzer.analyze('static/spaces in file.html');\n        const features = document.getFeatures({imported: true});\n        assert.deepEqual(\n            Array.from(features)\n                .filter((f) => f.kinds.has('document'))\n                .map((f) => (f as Document).url),\n            [\n              'static/spaces%20in%20file.html',\n              'static/dependencies/spaces%20in%20import.html'\n            ]);\n        assert.deepEqual(\n            Array.from(features)\n                .filter((f) => f.kinds.has('import'))\n                .map((f) => (f as Import).url),\n            ['static/dependencies/spaces%20in%20import.html']);\n      });\n\n      test('given a url with encoded spaces to analyze', async() => {\n        const document =\n            await analyzer.analyze('static/spaces%20in%20file.html');\n        const features = document.getFeatures({imported: true});\n        assert.deepEqual(\n            Array.from(features)\n                .filter((f) => f.kinds.has('document'))\n                .map((f) => (f as Document).url),\n            [\n              'static/spaces%20in%20file.html',\n              'static/dependencies/spaces%20in%20import.html'\n            ]);\n        assert.deepEqual(\n            Array.from(features)\n                .filter((f) => f.kinds.has('import'))\n                .map((f) => (f as Import).url),\n            ['static/dependencies/spaces%20in%20import.html']);\n      });\n    });\n  });\n\n  // TODO: reconsider whether we should test these private methods.\n  suite('_parse()', () => {\n\n    test('loads and parses an HTML document', async() => {\n      const doc =\n          await analyzer['_context']['_parse']('static/html-parse-target.html');\n      assert.instanceOf(doc, ParsedHtmlDocument);\n      assert.equal(doc.url, 'static/html-parse-target.html');\n    });\n\n    test('loads and parses a JavaScript document', async() => {\n      const doc = await analyzer['_context']['_parse']('static/js-elements.js');\n      assert.instanceOf(doc, JavaScriptDocument);\n      assert.equal(doc.url, 'static/js-elements.js');\n    });\n\n    test('returns a Promise that rejects for non-existant files', async() => {\n      await assert.isRejected(\n          analyzer['_context']['_parse']('static/not-found'));\n    });\n  });\n\n  suite('_getScannedFeatures()', () => {\n    test('default import scanners', async() => {\n      const contents = `<html><head>\n          <link rel=\"import\" href=\"polymer.html\">\n          <script src=\"foo.js\"></script>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const features = <ScannedImport[]>(\n          await analyzer['_context']['_getScannedFeatures'](document));\n      assert.deepEqual(\n          features.map((e) => e.type),\n          ['html-import', 'html-script', 'html-style']);\n      assert.deepEqual(\n          features.map((e) => e.url),  //\n          ['polymer.html', 'foo.js', 'foo.css']);\n    });\n\n    test('polymer css import scanner', async() => {\n      const contents = `<html><head>\n          <link rel=\"import\" type=\"css\" href=\"foo.css\">\n        </head>\n        <body>\n          <dom-module>\n            <link rel=\"import\" type=\"css\" href=\"bar.css\">\n          </dom-module>\n        </body></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const features =\n          <ScannedImport[]>(\n              await analyzer['_context']['_getScannedFeatures'](document))\n              .filter((e) => e instanceof ScannedImport);\n      assert.equal(features.length, 1);\n      assert.equal(features[0].type, 'css-import');\n      assert.equal(features[0].url, 'bar.css');\n    });\n\n    test('HTML inline document scanners', async() => {\n      const contents = `<html><head>\n          <script>console.log('hi')</script>\n          <style>body { color: red; }</style>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const features = <ScannedInlineDocument[]>(\n          await analyzer['_context']['_getScannedFeatures'](document));\n\n      assert.equal(features.length, 2);\n      assert.instanceOf(features[0], ScannedInlineDocument);\n      assert.instanceOf(features[1], ScannedInlineDocument);\n    });\n\n    const testName =\n        'HTML inline documents can be cloned, modified, and stringified';\n    test(testName, async() => {\n      const contents = stripIndent(`\n        <div>\n          <script>\n            console.log('foo');\n          </script>\n          <style>\n            body {\n              color: blue;\n            }\n          </style>\n        </div>\n      `).trim();\n      const expectedContents = stripIndent(`\n        <div>\n          <script>\n            console.log('bar');\n          </script>\n          <style>\n            body {\n              color: red;\n            }\n          </style>\n        </div>\n      `).trim();\n      const origDocument = await analyzer.analyze('test-doc.html', contents);\n      const document = clone(origDocument);\n\n      // In document, we'll change `foo` to `bar` in the js and `blue` to\n      // `red` in the css.\n      const jsDocs = document.getByKind('js-document', {imported: true});\n      assert.equal(1, jsDocs.size);\n      const jsDoc = jsDocs.values().next().value;\n      (jsDoc.parsedDocument as JavaScriptDocument).visit([{\n        enterCallExpression(node: estree.CallExpression) {\n          node.arguments =\n              [{type: 'Literal', value: 'bar', raw: 'bar'}] as estree.Literal[];\n        }\n      }]);\n\n      const cssDocs = document.getByKind('css-document', {imported: true});\n      assert.equal(1, cssDocs.size);\n      const cssDoc = cssDocs.values().next().value;\n      (cssDoc.parsedDocument as ParsedCssDocument).visit([{\n        visit(node: shady.Node) {\n          if (node.type === 'expression' && node.text === 'blue') {\n            node.text = 'red';\n          }\n        }\n      }]);\n\n      // We can stringify the clone and get the modified contents, and\n      // stringify the original and still get the original contents.\n      assert.deepEqual(document.stringify(), expectedContents);\n      assert.deepEqual(origDocument.stringify(), contents);\n    });\n  });\n\n  test('analyzes a document with a namespace', async() => {\n    const document =\n        await analyzer.analyze('static/namespaces/import-all.html');\n\n    const namespaces =\n        Array.from(document.getByKind('namespace', {imported: true}));\n    assert.deepEqual(namespaces.map((b) => b.name), [\n      'ExplicitlyNamedNamespace',\n      'ExplicitlyNamedNamespace.NestedNamespace',\n      'ImplicitlyNamedNamespace',\n      'ImplicitlyNamedNamespace.NestedNamespace',\n      'ParentNamespace.FooNamespace',\n      'ParentNamespace.BarNamespace',\n      'DynamicNamespace.ArrayNotation',\n      'DynamicNamespace.DynamicArrayNotation',\n      'DynamicNamespace.Aliased',\n    ]);\n  });\n\n  test('creates warnings when duplicate namespaces are analyzed', async() => {\n    const document =\n        await analyzer.analyze('static/namespaces/import-duplicates.html');\n    const namespaces =\n        Array.from(document.getByKind('namespace', {imported: true}));\n    assert.deepEqual(namespaces.map((b) => b.name), [\n      'ExplicitlyNamedNamespace',\n      'ExplicitlyNamedNamespace.NestedNamespace',\n    ]);\n    const warnings = document.getWarnings({imported: true});\n    assert.containSubset(\n        warnings, [{\n          message:\n              'Found more than one namespace named ExplicitlyNamedNamespace.',\n          severity: Severity.WARNING,\n          code: 'multiple-javascript-namespaces',\n        }]);\n    assert.deepEqual(await underliner.underline(warnings), [`\nvar DuplicateNamespace = {};\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~`]);\n  });\n\n  suite('legacy tests', () => {\n\n    // ported from old js-parser_test.js\n    // FIXME(rictic): I've temporarily disabled most recognition of Polymer ES6\n    //     classes because the scanner is buggy and triggers when it shouldn't.\n    test.skip('parses classes', async() => {\n      const document = await analyzer.analyze('static/es6-support.js');\n\n      const elements =\n          Array.from(document.getByKind('polymer-element', {imported: false}));\n      assert.deepEqual(\n          elements.map((e) => e.tagName), ['test-seed', 'test-element']);\n      const testSeed = elements[0];\n\n      assert.deepEqual(\n          testSeed.behaviorAssignments, ['Behavior1', 'Behavior2']);\n      assert.equal(testSeed.tagName, 'test-seed');\n\n      assert.equal(testSeed.observers.length, 2);\n      assert.equal(testSeed.properties.length, 4);\n\n      assert.deepEqual(\n          testSeed.events.map((e) => e.name), ['fired-event', 'data-changed']);\n    });\n  });\n\n  suite('analyzePackage', () => {\n    test('produces a package with the right documents', async() => {\n      const analyzer = new Analyzer({\n        urlLoader: new FSUrlLoader(path.join(__dirname, 'static', 'project'))\n      });\n      const pckage = await analyzer.analyzePackage();\n\n      // The root documents of the package are a minimal set of documents whose\n      // imports touch every document in the package.\n      assert.deepEqual(\n          Array.from(pckage['_documents']).map((d) => d.url).sort(),\n          ['cyclic-a.html', 'root.html', 'subdir/root-in-subdir.html']\n              .sort(), );\n\n      // Note that this does not contain the bower_components/ files\n      assert.deepEqual(\n          Array.from(pckage.getByKind('document'))\n              .filter((d) => !d.isInline)\n              .map((d) => d.url)\n              .sort(),\n          [\n            'cyclic-a.html',\n            'cyclic-b.html',\n            'root.html',\n            'leaf.html',\n            'subdir/subdir-leaf.html',\n            'subdir/root-in-subdir.html'\n          ].sort());\n\n      // And this does contain the one imported file in bower_components/\n      assert.deepEqual(\n          Array.from(pckage.getByKind('document', {externalPackages: true}))\n              .filter((d) => !d.isInline)\n              .map((d) => d.url)\n              .sort(),\n          [\n            'cyclic-a.html',\n            'cyclic-b.html',\n            'root.html',\n            'leaf.html',\n            'subdir/subdir-leaf.html',\n            'subdir/root-in-subdir.html',\n            'bower_components/imported.html',\n          ].sort());\n\n      const packageElements = [\n        'root-root',\n        'leaf-leaf',\n        'cyclic-a',\n        'cyclic-b',\n        'root-in-subdir',\n        'subdir-leaf'\n      ];\n\n      // All elements in the package\n      assert.deepEqual(\n          Array.from(pckage.getByKind('element')).map((e) => e.tagName).sort(),\n          packageElements.sort());\n\n      // All elements in the package, as well as all elements in its\n      // bower_components directory that are reachable from imports in the\n      // package.\n      assert.deepEqual(\n          Array.from(pckage.getByKind('element', {externalPackages: true}))\n              .map((e) => e.tagName)\n              .sort(),\n          packageElements.concat(['imported-dependency']).sort());\n    });\n\n    test('can get warnings from within and without the package', async() => {\n      const analyzer = new Analyzer({\n        urlLoader: new FSUrlLoader(\n            path.join(__dirname, 'static', 'project-with-errors'))\n      });\n      const pckage = await analyzer.analyzePackage();\n      assert.deepEqual(\n          Array.from(pckage['_documents']).map((d) => d.url), ['index.html']);\n      assert.deepEqual(\n          pckage.getWarnings().map((w) => w.sourceRange.file), ['index.html']);\n      assert.deepEqual(\n          pckage.getWarnings({externalPackages: true})\n              .map((w) => w.sourceRange.file)\n              .sort(),\n          ['bower_components/external-with-warnings.html', 'index.html']);\n    });\n  });\n\n  suite('_fork', () => {\n    test('returns an independent copy of Analyzer', async() => {\n      await analyzer.analyze('a.html', 'a is shared');\n      const analyzer2 = analyzer._fork();\n      await analyzer.analyze('b.html', 'b for analyzer');\n      await analyzer2.analyze('b.html', 'b for analyzer2');\n\n      const a1 = await analyzer.analyze('a.html');\n      const a2 = await analyzer2.analyze('a.html');\n      const b1 = await analyzer.analyze('b.html');\n      const b2 = await analyzer2.analyze('b.html');\n\n      assert.equal(a1.parsedDocument.contents, 'a is shared');\n      assert.equal(a2.parsedDocument.contents, 'a is shared');\n      assert.equal(b1.parsedDocument.contents, 'b for analyzer');\n      assert.equal(b2.parsedDocument.contents, 'b for analyzer2');\n    });\n\n    test('supports overriding of urlLoader', async() => {\n      const loader1 = {canLoad: () => true, load: async(u: string) => `${u} 1`};\n      const loader2 = {canLoad: () => true, load: async(u: string) => `${u} 2`};\n      const analyzer1 = new Analyzer({urlLoader: loader1});\n      const a1 = await analyzer1.analyze('a.html');\n      const analyzer2 = analyzer1._fork({urlLoader: loader2});\n      const a2 = await analyzer2.analyze('a.html');\n      const b1 = await analyzer1.analyze('b.html');\n      const b2 = await analyzer2.analyze('b.html');\n\n      assert.equal(a1.parsedDocument.contents, 'a.html 1', 'a.html, loader 1');\n      assert.equal(a2.parsedDocument.contents, 'a.html 1', 'a.html, in cache');\n      assert.equal(b1.parsedDocument.contents, 'b.html 1', 'b.html, loader 1');\n      assert.equal(b2.parsedDocument.contents, 'b.html 2', 'b.html, loader 2');\n    });\n  });\n\n  suite('race conditions and caching', () => {\n\n    class RacyUrlLoader implements UrlLoader {\n      constructor(\n          public pathToContentsMap: Map<string, string>,\n          private waitFunction: () => Promise<void>) {\n      }\n      canLoad() {\n        return true;\n      }\n      async load(path: string) {\n        await this.waitFunction();\n        const contents = this.pathToContentsMap.get(path);\n        if (contents != null) {\n          return contents;\n        }\n        throw new Error(`no known contents for ${path}`);\n      }\n    }\n\n    const editorSimulator = async(waitFn: () => Promise<void>) => {\n      // Here we're simulating a lot of noop-changes to base.html, which has\n      // two imports, which mutually import a common dep. This stresses the\n      // analyzer's caching.\n\n      const contentsMap = new Map<string, string>([\n        [\n          'base.html',\n          `<link rel=\"import\" href=\"a.html\">\\n<link rel=\"import\" href=\"b.html\">`\n        ],\n        ['a.html', `<link rel=\"import\" href=\"common.html\">`],\n        ['b.html', `<link rel=\"import\" href=\"common.html\">`],\n        ['common.html', `<custom-el></custom-el>`],\n      ]);\n      const analyzer =\n          new Analyzer({urlLoader: new RacyUrlLoader(contentsMap, waitFn)});\n      const promises: Promise<Document>[] = [];\n      const intermediatePromises: Promise<void>[] = [];\n      for (let i = 0; i < 1; i++) {\n        await waitFn();\n        for (const entry of contentsMap) {\n          // Randomly edit some files.\n          const path = entry[0];\n          const contents = entry[1];\n          if (Math.random() > 0.5) {\n            analyzer.analyze(path, contents);\n            if (Math.random() > 0.5) {\n              const p = analyzer.analyze(path, contents);\n              const cacheContext = analyzer['_context'];\n              intermediatePromises.push((async() => {\n                await p;\n                const docs = Array.from(\n                    cacheContext['_cache'].analyzedDocuments.values());\n                assert.isTrue(new Set(docs.map((d) => d.url).sort()).has(path));\n              })());\n            }\n          }\n          promises.push(analyzer.analyze('base.html'));\n          await Promise.all(promises);\n        }\n        // Analyze the base file\n        promises.push(analyzer.analyze('base.html'));\n        await Promise.all(promises);\n      }\n      // Assert that all edits went through fine.\n      await Promise.all(intermediatePromises);\n      // Assert that the every analysis of 'base.html' after each batch of edits\n      // was correct, and doesn't have missing or inconsistent results.\n      const documents = await Promise.all(promises);\n      for (const document of documents) {\n        assert.deepEqual(document.url, 'base.html');\n        const localFeatures = document.getFeatures({imported: false});\n        const kinds = Array.from(localFeatures).map((f) => Array.from(f.kinds));\n        const message = `localFeatures: ${JSON.stringify(\n            Array.from(localFeatures).map((f) => ({\n                                            kinds: Array.from(f.kinds),\n                                            ids: Array.from(f.identifiers)\n                                          })))}`;\n        assert.deepEqual(\n            kinds,\n            [\n              ['document', 'html-document'],\n              ['import', 'html-import'],\n              ['import', 'html-import']\n            ],\n            message);\n        const imports =\n            Array.from(document.getByKind('import', {imported: true}));\n        assert.sameMembers(\n            imports.map((m) => m.url),\n            ['a.html', 'b.html', 'common.html', 'common.html']);\n        const docs =\n            Array.from(document.getByKind('document', {imported: true}));\n        assert.sameMembers(\n            docs.map((d) => d.url),\n            ['a.html', 'b.html', 'base.html', 'common.html']);\n        const refs = Array.from(\n            document.getByKind('element-reference', {imported: true}));\n        assert.sameMembers(refs.map((ref) => ref.tagName), ['custom-el']);\n      }\n    };\n\n    test('editor simulator of imports that import a common dep', async() => {\n      const waitTimes: number[] = [];\n      const randomWait = () => new Promise<void>((resolve) => {\n        const waitTime = Math.random() * 30;\n        waitTimes.push(waitTime);\n        setTimeout(resolve, waitTime);\n      });\n      try {\n        await editorSimulator(randomWait);\n      } catch (err) {\n        console.error('Wait times to reproduce this failure:');\n        console.error(JSON.stringify(waitTimes));\n        throw err;\n      }\n    });\n\n    /**\n     * This is a tool for reproducing and debugging a failure of the editor\n     * simulator test above, but only at the exact same commit, as it's\n     * sensitive to the order of internal operations of the analyzer. So this\n     * code with a defined list of wait times should not be checked in.\n     *\n     * It's also worth noting that this code will be dependent on many other\n     * system factors, so it's only somewhat more reproducible, and may not\n     * end\n     * up being very useful. If it isn't, we should delete it.\n     */\n    test.skip('somewhat more reproducable editor simulator', async() => {\n      // Replace waitTimes' value with the array of wait times that's logged\n      // to the console when the random editor test fails.\n      const waitTimes: number[] = [];\n\n      const reproducableWait = () => new Promise<void>((resolve) => {\n        const waitTime = waitTimes.shift();\n        if (waitTime == null) {\n          throw new Error(\n              'Was asked for more random waits than the ' +\n              'given array of wait times');\n        }\n        setTimeout(resolve, waitTime);\n      });\n      await editorSimulator(reproducableWait);\n    });\n\n    suite('deterministic tests', () => {\n      // Deterministic tests extracted from various failures of the above\n      // random\n      // test.\n\n      /**\n       * This is an asynchronous keyed queue, useful for controlling the order\n       * of results in order to make tests more deterministic.\n       *\n       * It's intended to be used in fake loaders, scanners, etc, where the\n       * test\n       * provides the intended result on a file by file basis, with control\n       * over\n       * the order in which the results come in.\n       */\n      class KeyedQueue<Key, Result> {\n        private _requests = new Map<Key, Deferred<Result>[]>();\n        private _results = new Map<Key, Result[]>();\n\n        async request(key: Key): Promise<Result> {\n          const results = this._results.get(key) || [];\n          if (results.length > 0) {\n            return results.shift()!;\n          }\n          const deferred = new Deferred<Result>();\n          const deferreds = this._requests.get(key) || [];\n          this._requests.set(key, deferreds);\n          deferreds.push(deferred);\n          return deferred.promise;\n        }\n\n        /**\n         * Resolves the next unfulfilled request for the given key with the\n         * given value.\n         */\n        resolve(key: Key, value: Result) {\n          const requests = this._requests.get(key) || [];\n          if (requests.length > 0) {\n            const request = requests.shift()!;\n            request.resolve(value);\n            return;\n          }\n          const results = this._results.get(key) || [];\n          this._results.set(key, results);\n          results.push(value);\n        }\n\n        toString() {\n          return JSON.stringify({\n            openRequests: Array.from(this._requests.keys()),\n            openResponses: Array.from(this._results.keys())\n          });\n        }\n      }\n\n      class DeterministicUrlLoader implements UrlLoader {\n        queue = new KeyedQueue<string, string>();\n        canLoad(_url: string) {\n          return true;\n        }\n\n        async load(url: string) {\n          return this.queue.request(url);\n        }\n      }\n\n      class NoopUrlLoader implements UrlLoader {\n        canLoad() {\n          return true;\n        }\n        async load(): Promise<string> {\n          throw new Error(\n              `Noop Url Loader isn't supposed to be actually called.`);\n        }\n      }\n\n      /**\n       * This crashed the analyzer as there was a race to _makeDocument,\n       * violating its constraint that there not already be a resolved\n       * Document\n       * for a given path.\n       *\n       * This test came out of debugging this issue:\n       *     https://github.com/Polymer/polymer-analyzer/issues/406\n       */\n      test('two edits of the same file back to back', async() => {\n        const analyzer = new Analyzer({urlLoader: new NoopUrlLoader()});\n        await Promise.all([\n          analyzer.analyze('leaf.html', 'Hello'),\n          analyzer.analyze('leaf.html', 'World')\n        ]);\n      });\n\n      test('handles a shared dependency', async() => {\n        let documents = await Promise.all([\n          analyzer.analyze('static/diamond/a.html'),\n          analyzer.analyze('static/diamond/root.html'),\n        ]);\n\n        const contents = documents.map((d) => d.parsedDocument.contents);\n        documents = await Promise.all([\n          analyzer.analyze('static/diamond/a.html', contents[0]),\n          analyzer.analyze('static/diamond/root.html'),\n        ]);\n\n        const root = documents[1];\n\n        const localFeatures = root.getFeatures({imported: false});\n        const kinds = Array.from(localFeatures).map((f) => Array.from(f.kinds));\n        assert.deepEqual(kinds, [\n          ['document', 'html-document'],\n          ['import', 'html-import'],\n          ['import', 'html-import']\n        ]);\n      });\n\n      test('all files in a cycle wait for the whole cycle', async() => {\n        const loader = new DeterministicUrlLoader();\n        const analyzer = new Analyzer({urlLoader: loader});\n        const aAnalyzed = analyzer.analyze('a.html');\n        const bAnalyzed = analyzer.analyze('b.html');\n\n        loader.queue.resolve('a.html', `<link rel=\"import\" href=\"b.html\">\n            <link rel=\"import\" href=\"c.html\">`);\n        loader.queue.resolve('b.html', `<link rel=\"import\" href=\"a.html\">`);\n\n        let cResolved = false;\n        // Analysis shouldn't finish without c.html resolving\n        const aAnalyzedDone = aAnalyzed.then(() => {\n          assert.isTrue(cResolved);\n        });\n        const bAnalyzedDone = bAnalyzed.then(() => {\n          assert.isTrue(cResolved);\n        });\n        // flush the microtask queue\n        await Promise.resolve();\n        cResolved = true;\n        loader.queue.resolve('c.html', '');\n        // wait for the callback above to complete\n        await Promise.all([aAnalyzedDone, bAnalyzedDone]);\n      });\n\n      test.skip('something about the order of scanning?', async() => {\n        // TODO(rictic): test out more analysis race conditions in a\n        //     deterministic fashion.\n        const urlLoader = new DeterministicUrlLoader();\n        const analyzer = new Analyzer({urlLoader});\n        const promises = [];\n        promises.push(analyzer.analyze(\n            'a.html', '<link rel=\"import\" href=\"common.html\">'));\n        promises.push(analyzer.analyze(\n            'b.html', '<link rel=\"import\" href=\"common.html\">'));\n        promises.push(analyzer.analyze('base.html', `\n<link rel=\"import\" href=\"a.html\">\n<link rel=\"import\" href=\"b.html\">\n`));\n\n        urlLoader.queue.resolve('common.html', '');\n        urlLoader.queue.resolve('common.html', '');\n        await Promise.all(promises);\n      });\n\n      test('analyzes multiple imports of the same behavior', async() => {\n        const documentA = await analyzer.analyze(\n            'static/multiple-behavior-imports/element-a.html');\n        const documentB = await analyzer.analyze(\n            'static/multiple-behavior-imports/element-b.html');\n        assert.deepEqual(documentA.getWarnings({imported: true}), []);\n        assert.deepEqual(documentB.getWarnings({imported: true}), []);\n      });\n\n      test(\n          'analyzes multiple imports of the same behavior simultaneously',\n          async() => {\n            const result = await Promise.all([\n              analyzer.analyze(\n                  'static/multiple-behavior-imports/element-a.html'),\n              analyzer.analyze(\n                  'static/multiple-behavior-imports/element-b.html')\n            ]);\n            const documentA = result[0];\n            const documentB = result[1];\n            assert.deepEqual(documentA.getWarnings({imported: true}), []);\n            assert.deepEqual(documentB.getWarnings({imported: true}), []);\n          });\n    });\n  });\n});\n"]}