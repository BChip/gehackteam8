{"version":3,"sources":["test/polymer/polymer2-mixin-scanner_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;;AAGH,+BAA4B;AAC5B,6BAA6B;AAG7B,0EAAoE;AAEpE,+EAA+E;AAC/E,iFAA0E;AAC1E,kEAA2D;AAC3D,8CAA6C;AAE7C,KAAK,CAAC,sBAAsB,EAAE;IAC5B,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,qBAAqB,CAAC,CAAC;IACpE,MAAM,SAAS,GAAG,IAAI,2BAAW,CAAC,YAAY,CAAC,CAAC;IAChD,MAAM,UAAU,GAAG,IAAI,2BAAc,CAAC,SAAS,CAAC,CAAC;IAEjD,mBAAyB,QAAgB;;YAEnC,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,IAAI,oCAAgB,EAAE,CAAC;YACtC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC9C,MAAM,OAAO,GAAG,IAAI,6CAAoB,EAAE,CAAC;YAC3C,MAAM,KAAK,GAAG,CAAC,OAAgB,KAC3B,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAE/C,MAAM,QAAQ,GAAqB,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACvE,MAAM,CAA+B,QAAQ,CAAC,MAAM,CAChD,CAAC,CAAC,KAAK,CAAC,YAAY,kDAA0B,CAAC,CAAC;QACtD,CAAC;KAAA;IAAA,CAAC;IAEN,sBAAsB,KAAiC;QACrD,MAAM,CAAC;YACL,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;gBACN,IAAI,EAAE,CAAC,CAAC,IAAI;aACb,CAAC,CAAC;YACpC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;gBACN,IAAI,EAAE,CAAC,CAAC,IAAI;aACb,CAAC,CAAC;YACpC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CACtB,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;SAClE,CAAC;IACJ,CAAC;IAED,IAAI,CAAC,mCAAmC,EAAE;QACxC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACV,IAAI,EAAE,WAAW;gBACjB,WAAW,EAAE,qBAAqB;gBAClC,OAAO,EAAE,iBAAiB;gBAC1B,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,CAAC;QACrB,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QAC3E,aAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE;;;;;;;;;;;;;;;;;;;;;;;;EAwBjC,CAAC,CAAC;IACF,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,wCAAwC,EAAE;QAC7C,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACV,IAAI,EAAE,mBAAmB;gBACzB,WAAW,EAAE,qBAAqB;gBAClC,OAAO,EAAE,iBAAiB;gBAC1B,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,CAAC;QACrB,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QAC3E,aAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE;;;;;;;;;;;;;;;;;;;;EAoBjC,CAAC,CAAC;IACF,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,kCAAkC,EAAE;QACvC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACV,IAAI,EAAE,mBAAmB;gBACzB,WAAW,EAAE,EAAE;gBACf,OAAO,EAAE,EAAE;gBACX,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,CAAC;QACrB,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QAC3E,aAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE;;;;;;;;;;;;;;;;;;;;;;;;EAwBjC,CAAC,CAAC;IACF,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CACA,iFAAiF,EACjF;QACE,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACV,IAAI,EAAE,mBAAmB;gBACzB,WAAW,EAAE,EAAE;gBACf,OAAO,EAAE,EAAE;gBACX,UAAU,EAAE,EAAE;gBACd,UAAU,EAAE,EAAE;gBACd,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,CAAC;QACrB,MAAM,gBAAgB,GAClB,MAAM,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QACtD,aAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE;;eAExB,CAAC,CAAC;IACX,CAAC,CAAA,CAAC,CAAC;IAEP,IAAI,CAAC,6CAA6C,EAAE;QAClD,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,iDAAiD,EAAE;QACtD,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACV,IAAI,EAAE,mBAAmB;gBACzB,WAAW,EAAE,EAAE;gBACf,OAAO,EAAE,EAAE;gBACX,UAAU,EAAE,EAAE;gBACd,UAAU,EAAE,EAAE;gBACd,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,CAAC;QACrB,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QAC3E,aAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE;;;;EAIjC,CAAC,CAAC;IACF,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,qCAAqC,EAAE;QAC1C,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACV,IAAI,EAAE,mBAAmB;gBACzB,WAAW,EAAE,EAAE;gBACf,OAAO,EAAE,EAAE;gBACX,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,CAAC;QACrB,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;QAC3E,aAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BhC,CAAC,CAAC;IACH,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CACA,+DAA+D,EAC/D;QACE,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACV,IAAI,EAAE,mBAAmB;gBACzB,WAAW,EAAE,EAAE;gBACf,OAAO,EAAE,EAAE;gBACX,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,CAAC;IAEvB,CAAC,CAAA,CAAC,CAAC;IAEP,IAAI,CAAC,oDAAoD,EAAE;QACzD,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC3C,aAAM,CAAC,SAAS,CAAC,SAAS,EAAE;YAC1B;gBACE,IAAI,EAAE,WAAW;gBACjB,WAAW,EAAE,qBAAqB;gBAClC,OAAO,EAAE,iBAAiB;gBAC1B,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,UAAU,EAAE,CAAC;wBACX,IAAI,EAAE,KAAK;qBACZ,CAAC;gBACF,OAAO,EAAE;oBACP,EAAC,IAAI,EAAE,wBAAwB,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAC;oBAC/D;wBACE,IAAI,EAAE,iCAAiC;wBACvC,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS;qBAC9B;oBACD;wBACE,IAAI,EAAE,kCAAkC;wBACxC,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,GAAG,EAAC,EAAE,EAAC,IAAI,EAAE,GAAG,EAAC,EAAE,EAAC,IAAI,EAAE,GAAG,EAAC,CAAC,EAAE,MAAM,EAAE,SAAS;qBACnE;oBACD;wBACE,IAAI,EAAE,0CAA0C;wBAChD,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,GAAG,EAAC,EAAE,EAAC,IAAI,EAAE,GAAG,EAAC,EAAE,EAAC,IAAI,EAAE,GAAG,EAAC,CAAC,EAAE,MAAM,EAAE,SAAS;qBACnE;oBACD;wBACE,IAAI,EAAE,iDAAiD;wBACvD,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS;qBAC9B;iBACF;aACF;SACF,CAAC,CAAC;IAEL,CAAC,CAAA,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"polymer2-mixin-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\nimport * as path from 'path';\n\nimport {Visitor} from '../../javascript/estree-visitor';\nimport {JavaScriptParser} from '../../javascript/javascript-parser';\nimport {ScannedFeature} from '../../model/model';\nimport {ScannedPolymerElementMixin} from '../../polymer/polymer-element-mixin';\nimport {Polymer2MixinScanner} from '../../polymer/polymer2-mixin-scanner';\nimport {FSUrlLoader} from '../../url-loader/fs-url-loader';\nimport {CodeUnderliner} from '../test-utils';\n\nsuite('Polymer2MixinScanner', () => {\n  const testFilesDir = path.resolve(__dirname, '../static/polymer2/');\n  const urlLoader = new FSUrlLoader(testFilesDir);\n  const underliner = new CodeUnderliner(urlLoader);\n\n  async function getMixins(filename: string):\n      Promise<ScannedPolymerElementMixin[]> {\n        const file = await urlLoader.load(filename);\n        const parser = new JavaScriptParser();\n        const document = parser.parse(file, filename);\n        const scanner = new Polymer2MixinScanner();\n        const visit = (visitor: Visitor) =>\n            Promise.resolve(document.visit([visitor]));\n\n        const features: ScannedFeature[] = await scanner.scan(document, visit);\n        return <ScannedPolymerElementMixin[]>features.filter(\n            (e) => e instanceof ScannedPolymerElementMixin);\n      };\n\n  function getTestProps(mixin: ScannedPolymerElementMixin): any {\n    return {\n      name: mixin.name,\n      description: mixin.description,\n      summary: mixin.summary,\n      properties: mixin.properties.map((p) => ({\n                                         name: p.name,\n                                       })),\n      attributes: mixin.attributes.map((a) => ({\n                                         name: a.name,\n                                       })),\n      methods: mixin.methods.map(\n          (m) => ({name: m.name, params: m.params, return: m.return })),\n    };\n  }\n\n  test('finds mixin function declarations', async() => {\n    const mixins = await getMixins('test-mixin-1.js');\n    const mixinData = mixins.map(getTestProps);\n    assert.deepEqual(mixinData, [{\n                       name: 'TestMixin',\n                       description: 'A mixin description',\n                       summary: 'A mixin summary',\n                       properties: [{\n                         name: 'foo',\n                       }],\n                       attributes: [{\n                         name: 'foo',\n                       }],\n                       methods: [],\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.equal(underlinedSource, `\nfunction TestMixin(superclass) {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  return class extends superclass {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    static get properties() {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      return {\n~~~~~~~~~~~~~~\n        foo: {\n~~~~~~~~~~~~~~\n          notify: true,\n~~~~~~~~~~~~~~~~~~~~~~~\n          type: String,\n~~~~~~~~~~~~~~~~~~~~~~~\n        },\n~~~~~~~~~~\n      };\n~~~~~~~~\n    }\n~~~~~\n  }\n~~~\n}\n~`);\n  });\n\n  test('finds mixin arrow function expressions', async() => {\n    const mixins = await getMixins('test-mixin-2.js');\n    const mixinData = mixins.map(getTestProps);\n    assert.deepEqual(mixinData, [{\n                       name: 'Polymer.TestMixin',\n                       description: 'A mixin description',\n                       summary: 'A mixin summary',\n                       properties: [{\n                         name: 'foo',\n                       }],\n                       attributes: [{\n                         name: 'foo',\n                       }],\n                       methods: [],\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.equal(underlinedSource, `\nconst TestMixin = (superclass) => class extends superclass {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  static get properties() {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    return {\n~~~~~~~~~~~~\n      foo: {\n~~~~~~~~~~~~\n        notify: true,\n~~~~~~~~~~~~~~~~~~~~~\n        type: String,\n~~~~~~~~~~~~~~~~~~~~~\n      },\n~~~~~~~~\n    };\n~~~~~~\n  }\n~~~\n}\n~`);\n  });\n\n  test('finds mixin function expressions', async() => {\n    const mixins = await getMixins('test-mixin-3.js');\n    const mixinData = mixins.map(getTestProps);\n    assert.deepEqual(mixinData, [{\n                       name: 'Polymer.TestMixin',\n                       description: '',\n                       summary: '',\n                       properties: [{\n                         name: 'foo',\n                       }],\n                       attributes: [{\n                         name: 'foo',\n                       }],\n                       methods: [],\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.equal(underlinedSource, `\nconst TestMixin = function(superclass) {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  return class extends superclass {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    static get properties() {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      return {\n~~~~~~~~~~~~~~\n        foo: {\n~~~~~~~~~~~~~~\n          notify: true,\n~~~~~~~~~~~~~~~~~~~~~~~\n          type: String,\n~~~~~~~~~~~~~~~~~~~~~~~\n        },\n~~~~~~~~~~\n      };\n~~~~~~~~\n    }\n~~~~~\n  }\n~~~\n}\n~`);\n  });\n\n  test(\n      'finds mixin variable declaration with only name, does not use trailing function',\n      async() => {\n        const mixins = await getMixins('test-mixin-4.js');\n        const mixinData = mixins.map(getTestProps);\n        assert.deepEqual(mixinData, [{\n                           name: 'Polymer.TestMixin',\n                           description: '',\n                           summary: '',\n                           properties: [],\n                           attributes: [],\n                           methods: [],\n                         }]);\n        const underlinedSource =\n            await underliner.underline(mixins[0].sourceRange);\n        assert.equal(underlinedSource, `\nlet TestMixin;\n~~~~~~~~~~~~~~`);\n      });\n\n  test('what to do on a class marked @polymerMixin?', async() => {\n    const mixins = await getMixins('test-mixin-5.js');\n    const mixinData = mixins.map(getTestProps);\n    assert.deepEqual(mixinData, []);\n  });\n\n  test('finds mixin function declaration with only name', async() => {\n    const mixins = await getMixins('test-mixin-6.js');\n    const mixinData = mixins.map(getTestProps);\n    assert.deepEqual(mixinData, [{\n                       name: 'Polymer.TestMixin',\n                       description: '',\n                       summary: '',\n                       properties: [],\n                       attributes: [],\n                       methods: [],\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.equal(underlinedSource, `\nfunction TestMixin() {\n~~~~~~~~~~~~~~~~~~~~~~\n}\n~`);\n  });\n\n  test('finds mixin assigned to a namespace', async() => {\n    const mixins = await getMixins('test-mixin-7.js');\n    const mixinData = mixins.map(getTestProps);\n    assert.deepEqual(mixinData, [{\n                       name: 'Polymer.TestMixin',\n                       description: '',\n                       summary: '',\n                       properties: [{\n                         name: 'foo',\n                       }],\n                       attributes: [{\n                         name: 'foo',\n                       }],\n                       methods: [],\n                     }]);\n    const underlinedSource = await underliner.underline(mixins[0].sourceRange);\n    assert.equal(underlinedSource, `\nPolymer.TestMixin = Polymer.woohoo(function TestMixin(base) {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  /** @polymerMixinClass */\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  class TestMixin extends base {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    static get properties() {\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      return {\n~~~~~~~~~~~~~~\n        foo: {\n~~~~~~~~~~~~~~\n          notify: true,\n~~~~~~~~~~~~~~~~~~~~~~~\n          type: String,\n~~~~~~~~~~~~~~~~~~~~~~~\n        },\n~~~~~~~~~~\n      };\n~~~~~~~~\n    };\n~~~~~~\n  };\n~~~~\n  return TestMixin;\n~~~~~~~~~~~~~~~~~~~\n});\n~~`);\n  });\n\n  test(\n      'properly analyzes nested mixin assignments with memberof tags',\n      async() => {\n        const mixins = await getMixins('test-mixin-8.js');\n        const mixinData = mixins.map(getTestProps);\n        assert.deepEqual(mixinData, [{\n                           name: 'Polymer.TestMixin',\n                           description: '',\n                           summary: '',\n                           properties: [{\n                             name: 'foo',\n                           }],\n                           attributes: [{\n                             name: 'foo',\n                           }],\n                           methods: [],\n                         }]);\n\n      });\n\n  test('properly analyzes mixin instance and class methods', async() => {\n    const mixins = await getMixins('test-mixin-9.js');\n    const mixinData = mixins.map(getTestProps);\n    assert.deepEqual(mixinData, [\n      {\n        name: 'TestMixin',\n        description: 'A mixin description',\n        summary: 'A mixin summary',\n        properties: [{\n          name: 'foo',\n        }],\n        attributes: [{\n          name: 'foo',\n        }],\n        methods: [\n          {name: 'customInstanceFunction', params: [], return: undefined},\n          {\n            name: 'customInstanceFunctionWithJSDoc',\n            params: [], return: undefined,\n          },\n          {\n            name: 'customInstanceFunctionWithParams',\n            params: [{name: 'a'}, {name: 'b'}, {name: 'c'}], return: undefined,\n          },\n          {\n            name: 'customInstanceFunctionWithParamsAndJSDoc',\n            params: [{name: 'a'}, {name: 'b'}, {name: 'c'}], return: undefined,\n          },\n          {\n            name: 'customInstanceFunctionWithParamsAndPrivateJSDoc',\n            params: [], return: undefined,\n          },\n        ],\n      }\n    ]);\n\n  });\n\n});\n"]}