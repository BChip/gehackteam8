{"version":3,"sources":["demo/polymer-lint.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;;AAEH,oCAAgI;AAEhI;;GAEG;AACH;;QACE,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;QAC9B,MAAM,QAAQ,GAAG,IAAI,gBAAQ,CAAC;YAC5B,SAAS,EAAE,IAAI,mBAAW,CAAC,OAAO,CAAC;YACnC,WAAW,EAAE,IAAI,0BAAkB,EAAE;SACtC,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,MAAM,cAAc,GAAG,IAAI,sBAAc,CAAC,OAAO,CAAC,MAAM,EAAE,EAAC,QAAQ,EAAC,CAAC,CAAC;QACtE,MAAM,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC7C,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5E,EAAE,CAAC,CAAC,aAAa,KAAK,gBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;CAAA;AAAA,CAAC;AAEF,qBAA2B,QAAkB,EAAE,SAAiB;;QAE1D,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC;QACjD,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,EAAE,CAAC,CAAC,CAAC,YAAY,gCAAwB,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACrB,CAAC;YACD,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;CAAA;AAEL,IAAI,EAAE;KACD,KAAK,CAAC,CAAC,GAAG;IACT,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,CAAC;IAC/C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC","file":"polymer-lint.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Analyzer, FSUrlLoader, PackageUrlResolver, Severity, Warning, WarningCarryingException, WarningPrinter} from '../index';\n\n/**\n * A basic demo of a linter CLI using the Analyzer API.\n */\nasync function main() {\n  const basedir = process.cwd();\n  const analyzer = new Analyzer({\n    urlLoader: new FSUrlLoader(basedir),\n    urlResolver: new PackageUrlResolver()\n  });\n  const warnings = await getWarnings(analyzer, process.argv[2]);\n  const warningPrinter = new WarningPrinter(process.stderr, {analyzer});\n  await warningPrinter.printWarnings(warnings);\n  const worstSeverity = Math.min.apply(Math, warnings.map((w) => w.severity));\n  if (worstSeverity === Severity.ERROR) {\n    process.exit(1);\n  }\n};\n\nasync function getWarnings(analyzer: Analyzer, localPath: string):\n    Promise<Warning[]> {\n      try {\n        const document = await analyzer.analyze(localPath);\n        return document.getWarnings({imported: false});\n      } catch (e) {\n        if (e instanceof WarningCarryingException) {\n          return [e.warning];\n        }\n        throw e;\n      }\n    }\n\nmain()\n    .catch((err) => {\n      console.error(err.stack || err.message || err);\n      process.exit(1);\n    });\n"]}